// Generated by CoffeeScript 1.7.1
(function() {
  var MWLearn, aan, add, around, capitalize, contains, copyarray, copyobj, divide, extend, fixAngle, forceArray, mean, merge, mod, msPerT, mult, naturalAngle, objPath, pickFrom, randomize, remove, rotate, setdiff, smult, sub, sum, swap, unique, wordCount, zpad,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.doDebug = function() {
    var x, y, z;
    x = [[1, 2, 3], ['hi', 'bye']];
    y = [[1, 3, 3], ['hi', 'bye']];
    z = [[1, 2, 3], ['hi', 'bye']];
    alert(equals(x, y));
    return alert(equals(x, z));
  };

  window.obj2str = function(obj, indent) {
    var key, pad, pre, str, val;
    if (indent == null) {
      indent = 0;
    }
    if ((obj != null) && (typeof obj === 'object')) {
      pre = (indent > 0 ? "\n" : "");
      pad = zpad('', indent, "\t");
      str = [];
      for (key in obj) {
        val = obj[key];
        str.push("" + pad + key + ":" + (obj2str(val, indent + 1)));
      }
      return pre + str.join("\n");
    } else {
      return obj;
    }
  };

  objPath = function() {
    var el, obj, path, x, _i, _len;
    obj = arguments[0], path = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    x = obj;
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      el = path[_i];
      if (x != null) {
        x = x[el];
      } else {
        break;
      }
    }
    return x;
  };

  window.getClass = function(obj) {
    return obj.constructor.name;
  };

  zpad = function(x, n, chr) {
    if (chr == null) {
      chr = '0';
    }
    while (('' + x).length < n) {
      x = chr + x;
    }
    return x;
  };

  extend = function(obj, prop) {
    var key, val;
    for (key in prop) {
      val = prop[key];
      obj[key] = val;
    }
    return obj;
  };

  copyobj = function(obj) {
    return extend({}, obj);
  };

  copyarray = function(arr) {
    return arr.slice(0);
  };

  merge = function(obj1, obj2) {
    return extend(copyobj(obj1), obj2);
  };

  remove = function(obj, keys) {
    var key, objc, _i, _len;
    objc = copyobj(obj);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      delete objc[key];
    }
    return objc;
  };

  swap = function(x, i1, i2) {
    var tmp;
    tmp = x[i1];
    x[i1] = x[i2];
    return x[i2] = tmp;
  };

  sum = function(x, s, e) {
    var n;
    if (s == null) {
      s = 0;
    }
    if (e == null) {
      e = null;
    }
    n = x.length;
    if ((0 <= s && s < n) && ((e == null) || s <= e)) {
      return x[s] + sum(x, s + 1, e != null ? e : n - 1);
    } else {
      return 0;
    }
  };

  add = function(a, b) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(a[idx] + b[idx]);
    }
    return _results;
  };

  sub = function(a, b) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(a[idx] - b[idx]);
    }
    return _results;
  };

  mult = function(a, b) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(a[idx] * b[idx]);
    }
    return _results;
  };

  mean = function(a) {
    return sum(a) / a.length;
  };

  divide = function(a, b) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(a[idx] / b[idx]);
    }
    return _results;
  };

  smult = function(a, b) {
    var idx, _i, _ref, _results;
    _results = [];
    for (idx = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      _results.push(a[idx] * b);
    }
    return _results;
  };

  mod = function(x, n) {
    var r;
    r = x % n;
    if (r < 0) {
      return r + n;
    } else {
      return r;
    }
  };

  around = function(x) {
    var e, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      e = x[_i];
      _results.push(Math.round(e));
    }
    return _results;
  };

  window.nearest = function(x, ref) {
    var df, dfMin, i, r, _i, _ref;
    df = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = ref.length; _i < _len; _i++) {
        r = ref[_i];
        _results.push(Math.abs(x - r));
      }
      return _results;
    })();
    dfMin = Math.min.apply(Math, df);
    for (i = _i = 0, _ref = ref.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (df[i] === dfMin) {
        return ref[i];
      }
    }
  };

  window.randomInt = function(mn, mx) {
    return Math.floor(Math.random() * (mx - mn + 1)) + mn;
  };

  randomize = function(x) {
    var iCur, iRnd, _results;
    iCur = x.length;
    _results = [];
    while (iCur !== 0) {
      iRnd = randomInt(0, iCur - 1);
      iCur -= 1;
      _results.push(swap(x, iCur, iRnd));
    }
    return _results;
  };

  pickFrom = function(x) {
    return x[randomInt(0, x.length - 1)];
  };

  rotate = function(p, theta, about) {
    var a, cs, sn, x, y;
    if (about == null) {
      about = [0, 0];
    }
    a = Math.PI * theta / 180;
    cs = Math.cos(a);
    sn = Math.sin(a);
    x = p[0] - about[0];
    y = p[1] - about[1];
    return p = [x * cs - y * sn + about[0], x * sn + y * cs + about[1]];
  };

  window.equals = function(x, y) {
    var idx, _i, _ref;
    if (Array.isArray(x) && Array.isArray(y)) {
      if (x.length === y.length) {
        for (idx = _i = 0, _ref = x.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
          if (!equals(x[idx], y[idx])) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    } else {
      return x === y;
    }
  };

  window.find = function(x, v) {
    var e, f, i, _i, _len;
    f = [];
    for (i = _i = 0, _len = x.length; _i < _len; i = ++_i) {
      e = x[i];
      if (equals(e, v)) {
        f.push(i);
      }
    }
    return f;
  };

  setdiff = function(x, d) {
    var e, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      e = x[_i];
      if (!equals(e, d)) {
        _results.push(e);
      }
    }
    return _results;
  };

  fixAngle = function(a) {
    a = mod(a, 360);
    if (a > 180) {
      return a - 360;
    } else {
      return a;
    }
  };

  naturalAngle = function(a, orientation, compact) {
    var direction, orient;
    if (orientation == null) {
      orientation = false;
    }
    if (compact == null) {
      compact = false;
    }
    a = fixAngle(a);
    switch (a) {
      case 0:
        return "";
      case 180:
        return "" + (Math.abs(a)) + "°";
      default:
        if (compact) {
          direction = a > 0 ? ' CW' : ' CCW';
        } else {
          direction = a > 0 ? ' clockwise' : ' counter clockwise';
        }
        orient = orientation ? ' rotated' : '';
        return "" + (Math.abs(a)) + "°" + direction + orient;
    }
  };

  window.naturalDirection = function(a, symmetry) {
    if (symmetry == null) {
      symmetry = 'none';
    }
    a = fixAngle(a);
    switch (symmetry) {
      case "90":
        switch (a) {
          case -90:
          case 0:
          case 90:
          case 180:
            return "";
          default:
            return "" + (naturalAngle(a)) + " rotated";
        }
        break;
      case "180":
        switch (a) {
          case 0:
          case 180:
            return "vertical";
          case -90:
          case 90:
            return "horizontal";
          default:
            return "" + (naturalAngle(a)) + " rotated";
        }
        break;
      default:
        switch (a) {
          case 0:
            return "up facing";
          case 90:
            return "right facing";
          case 180:
            return "down facing";
          case -90:
            return "left facing";
          default:
            return "" + (naturalAngle(a)) + " rotated";
        }
    }
  };

  aan = function(str) {
    if (str.length === 0 || find("aeiou", str[0]).length === 0) {
      return 'a';
    } else {
      return 'an';
    }
  };

  capitalize = function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };

  contains = function(x, v) {
    var e, _i, _len;
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      e = x[_i];
      if (equals(e, v)) {
        return true;
      }
    }
    return false;
  };

  unique = function(x) {
    var e, u, _i, _len;
    u = [];
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      e = x[_i];
      if (!contains(u, e)) {
        u.push(e);
      }
    }
    return u;
  };

  forceArray = function(a) {
    if (a != null) {
      if (Array.isArray(a)) {
        return a;
      } else {
        return [a];
      }
    } else {
      return a;
    }
  };

  wordCount = function(str) {
    return str.split(' ').length;
  };

  msPerT = function(unit) {
    switch (unit) {
      case 'day':
        return 86400000;
      case 'hour':
      case 'hr':
      case 'h':
        return 3600000;
      case 'minute':
      case 'min':
      case 'm':
        return 60000;
      case 'second':
      case 'sec':
      case 's':
        return 1000;
      case 'millisecond':
      case 'msec':
      case 'ms':
        return 1;
      case 'dayminus10minutes':
        return 85800000;
      default:
        throw 'Invalid unit';
    }
  };

  window.convertTime = function(t, unitFrom, unitTo) {
    return t * msPerT(unitFrom) / msPerT(unitTo);
  };

  window.time2str = function(t, showms) {
    var hours, minutes, seconds, strHours, strMS, strMinutes, strSeconds;
    if (showms == null) {
      showms = false;
    }
    hours = Math.floor(convertTime(t, 'ms', 'hour'));
    t -= convertTime(hours, 'hour', 'ms');
    minutes = Math.floor(convertTime(t, 'ms', 'minute'));
    t -= convertTime(minutes, 'minute', 'ms');
    seconds = Math.floor(convertTime(t, 'ms', 'second'));
    t -= convertTime(seconds, 'second', 'ms');
    strHours = hours > 0 ? "" + (zpad(hours, 2)) + ":" : '';
    strMinutes = "" + (zpad(minutes, 2)) + ":";
    strSeconds = zpad(seconds, 2);
    strMS = showms ? "." + t : '';
    return "" + strHours + strMinutes + strSeconds + strMS;
  };

  window.squareGrid = function(n) {
    var col, cr, i, iMax, rc, row, score, x, _i, _j, _ref, _ref1, _results;
    rc = (function() {
      _results = [];
      for (var _i = 1, _ref = Math.max(1, Math.floor(Math.sqrt(n))); 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    cr = (function() {
      var _j, _len, _results1;
      _results1 = [];
      for (_j = 0, _len = rc.length; _j < _len; _j++) {
        x = rc[_j];
        _results1.push(Math.max(1, Math.ceil(n / x)));
      }
      return _results1;
    })();
    score = (function() {
      var _j, _ref1, _results1;
      _results1 = [];
      for (i = _j = 0, _ref1 = rc.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        _results1.push(1 / ((1 + rc[i] * cr[i] - n) * Math.pow(1 + cr[i] - rc[i], 3)));
      }
      return _results1;
    })();
    iMax = 0;
    for (i = _j = 1, _ref1 = score.length - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
      if (score[i] > score[iMax]) {
        iMax = i;
      }
    }
    row = Math.min(rc[iMax], cr[iMax]);
    col = Math.max(rc[iMax], cr[iMax]);
    return [row, col];
  };

  window.MWLearn = MWLearn = (function() {
    var MWClass, MWClassAction, MWClassColor, MWClassData, MWClassExec, MWClassGame, MWClassInput, MWClassQueue, MWClassSession, MWClassShow, MWClassTime;

    MWLearn.prototype.base = null;

    MWLearn.prototype.user_greeting = null;

    MWLearn.prototype.user = null;

    MWLearn.prototype.csrf = null;

    MWLearn.prototype.type = null;

    MWLearn.prototype.container = null;

    MWLearn.prototype.el = null;

    MWLearn.prototype.im = null;

    MWLearn.prototype.status = null;

    MWLearn.prototype.background = null;

    MWLearn.prototype.debug = false;

    MWLearn.prototype._background = null;

    MWLearn.prototype._isbase = false;

    MWLearn.prototype._ready = false;

    function MWLearn(options) {
      var defaults, imConstruct, images, timerName, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      if (options.base != null) {
        this.base = options.base;
      } else {
        this._isbase = true;
        this.base = this;
      }
      this.type = (_ref = options.type) != null ? _ref : 'experiment';
      defaults = {
        debug: false,
        container: this.type,
        background: 'white',
        background_stroke: 'none',
        images: [],
        loadimages: false,
        fixation: [
          "Circle", [
            {
              color: "red",
              r: 5
            }
          ]
        ],
        run_session: false
      };
      defaults = merge(defaults, (function() {
        switch (this.type) {
          case 'experiment':
            return {
              loadimages: true,
              run_session: true
            };
          case 'status':
            return {};
          case 'history':
            return {};
          case 'popup':
            return {
              background_stroke: 'black'
            };
          default:
            return {};
        }
      }).call(this));
      options = merge(defaults, options);
      this.debug = options.debug;
      this.user_greeting = options.user_greeting;
      this.user = options.user;
      this.csrf = options.csrf;
      this.container = options.container;
      this.background = options.background;
      this.im = {};
      this.paper = Raphael(this.container);
      this.action = this.Action();
      this.show = this.Show();
      this.input = this.Input();
      this.time = this.Time();
      this.color = this.Color();
      this.exec = this.Exec();
      this.queue = this.Queue();
      this._background = this.show.Rectangle({
        color: this.background,
        width: this.width(),
        height: this.height(),
        stroke: options.background_stroke,
        "stroke-width": 16
      });
      this.el = {};
      timerName = 'session';
      switch (this.type) {
        case 'experiment':
          this.el.status = new MWLearn({
            base: this,
            type: 'status',
            practice_time: options.practice_time,
            debug: this.debug
          });
          this.el.history = new MWLearn({
            base: this,
            type: 'history',
            debug: this.debug
          });
          this.el.popup = new MWLearn({
            base: this,
            type: 'popup',
            debug: this.debug
          });
          break;
        case 'status':
          this.el.timer = this.show.Timer((_ref1 = options.practice_time) != null ? _ref1 : convertTime(25, 'minute', 'ms'), {
            name: timerName,
            timeout: msPerT('dayminus10minutes'),
            initialize: false,
            color: 'gray',
            l: 10,
            t: 10
          });
          this.el.actions = this.show.ItemList({}, {
            l: 10,
            t: this.el.timer.attr("t") + this.el.timer.attr("height") + 10
          });
          this.el.actions.contain();
          break;
        case 'history':
          this.el.record = this.show.TrialRecord({
            width: this.width() - 10,
            height: this.height() - 10
          });
          break;
        case 'popup':
          this.visible(false);
          break;
        default:
          null;
      }
      this.data = this.Data();
      this.game = this.Game();
      this.session = this.Session();
      if (this._isbase) {
        this.el.status.el.timer.initialize();
      }
      if (options.loadimages) {
        imConstruct = this.game.construct.srcPart("all");
        images = options.images.concat(imConstruct);
        if (images.length) {
          this.LoadImages(images);
        }
      }
      if (options.run_session) {
        this.queue.add('session_run', (function(_this) {
          return function() {
            return _this.session.run();
          };
        })(this));
      }
      this.ready(true);
    }

    MWLearn.prototype.width = function() {
      return this.paper.width;
    };

    MWLearn.prototype.height = function() {
      return this.paper.height;
    };

    MWLearn.prototype.clear = function() {
      return this.paper.clear();
    };

    MWLearn.prototype.ready = function(state) {
      if (state == null) {
        state = null;
      }
      if (state != null) {
        this._ready = state;
        if (this._ready) {
          this.queue["do"]();
        }
        if (this.type === 'experiment') {
          this.el.status.ready(state);
          this.el.history.ready(state);
          this.el.popup.ready(state);
        }
      }
      return this._ready;
    };

    MWLearn.prototype.LoadImages = function(images) {
      var f, fUpdate, idx, nLoaded, p, qName, _i, _ref, _results;
      this.action.start('loadimages', 'loading images');
      nLoaded = 0;
      p = this.show.Progress("Loading Images", {
        steps: 20
      });
      fUpdate = (function(_this) {
        return function() {
          return p.update(++nLoaded / images.length);
        };
      })(this);
      _results = [];
      for (idx = _i = 0, _ref = images.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
        f = idx === images.length - 1 ? ((function(_this) {
          return function() {
            fUpdate();
            return _this.action.stop('loadimages');
          };
        })(this)) : fUpdate;
        qName = "image_" + images[idx];
        this.queue.add(qName, f, {
          "do": false
        });
        this.im[images[idx]] = new Image();
        this.im[images[idx]].src = images[idx];
        _results.push(this.im[images[idx]].onload = ((function(_this) {
          return function(name) {
            return function() {
              return _this.queue["do"](name);
            };
          };
        })(this))(qName));
      }
      return _results;
    };

    MWLearn.prototype.visible = function(state) {
      var el, elements, _i, _len, _results;
      elements = this.type === 'popup' ? ["\#" + this.container, "\#" + this.container + "_dim"] : ["\#" + this.container];
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        el = elements[_i];
        _results.push(state ? $(el).show() : $(el).hide());
      }
      return _results;
    };

    MWLearn.prototype.MWClass = MWClass = (function() {
      MWClass.prototype.root = null;

      MWClass.prototype.base = null;

      function MWClass(root) {
        this.root = root;
        this.base = root.base;
      }

      return MWClass;

    })();

    MWLearn.prototype.Action = function() {
      return new MWClassAction(this);
    };

    MWLearn.prototype.MWClassAction = MWClassAction = (function(_super) {
      __extends(MWClassAction, _super);

      function MWClassAction(root) {
        MWClassAction.__super__.constructor.call(this, root);
      }

      MWClassAction.prototype.actions = function() {
        return objPath(this, 'root', 'el', 'status', 'el', 'actions');
      };

      MWClassAction.prototype.start = function(name, action) {
        if (this.actions() != null) {
          return this.actions().add(name, action);
        }
      };

      MWClassAction.prototype.stop = function(name) {
        if (this.actions() != null) {
          return this.actions().remove(name);
        }
      };

      MWClassAction.prototype.dialog = function(prompt, options) {
        var ffCallback, popup, stim, _ref, _ref1;
        if (options == null) {
          options = {};
        }

        /*prompt: for 'info' type, a function that takes an mwl object and
          displays something. for 'yesno' type, the string to prompt.
         */
        popup = this.base.el.popup;
        popup.visible(true);
        options.type = (_ref = options.type) != null ? _ref : 'info';
        options.callback = (_ref1 = options.callback) != null ? _ref1 : null;
        ffCallback = ((function(_this) {
          return function(stm) {
            return function(response) {
              var s, _i, _len;
              for (_i = 0, _len = stim.length; _i < _len; _i++) {
                s = stim[_i];
                if (s.exists) {
                  s.remove();
                }
              }
              popup.visible(false);
              if (options.callback != null) {
                return options.callback(response);
              }
            };
          };
        })(this));
        switch (options.type) {
          case 'info':
            stim = forceArray(prompt(popup));
            return stim.push(popup.show.X({
              href: 'javascript:void(0)',
              mouseup: (function(_this) {
                return function() {
                  return ffCallback(stim)(null);
                };
              })(this),
              l: 10,
              t: 10
            }));
          case 'yesno':
            return stim = [
              popup.show.YesNo(prompt, {
                callback: (function(_this) {
                  return function(responseYes) {
                    return ffCallback(stim)(responseYes);
                  };
                })(this)
              })
            ];
          case 'ok':
            return stim = [
              popup.show.Ok(prompt, {
                callback: (function(_this) {
                  return function() {
                    return ffCallback(stim)(null);
                  };
                })(this)
              })
            ];
          default:
            throw 'Invalid dialog type.';
        }
      };

      MWClassAction.prototype.help = function() {
        return this.dialog((function(m) {
          var cs, fontSize, l1, l2, l3;
          fontSize = 24;
          l1 = m.show.Text('For help, email Alex at:', {
            "text-anchor": 'middle',
            "font-size": fontSize
          });
          l2 = m.show.Text('schlegel@gmail.com', {
            "text-anchor": 'middle',
            href: 'mailto:schlegel@gmail.com?subject=MWLearn Help!',
            target: 'blank',
            color: 'blue',
            t: l1.attr('t') + l1.attr('height'),
            "font-size": fontSize
          });
          l3 = m.show.Text('\nor call:\n424–242–4342', {
            "text-anchor": 'middle',
            t: l2.attr('t') + l2.attr('height'),
            "font-size": fontSize
          });
          return cs = m.show.CompoundStimulus([l1, l2, l3], {
            y: 0
          });
        }));
      };

      MWClassAction.prototype.logoutConfirm = function() {
        var prompt, t;
        t = this.base.session.remaining();
        prompt = t > 0 ? "You still have " + (time2str(t)) + " remaining in your session.\nLogout?" : 'Logout?';
        return this.dialog(prompt, {
          type: 'yesno',
          callback: (function(_this) {
            return function(responseYes) {
              if (responseYes) {
                return _this.logout();
              }
            };
          })(this)
        });
      };

      MWClassAction.prototype.logout = function() {
        this.root.queue.clear();
        return this.root.data.save({
          callback: ((function(_this) {
            return function() {
              return window.location = '/logout/';
            };
          })(this))
        });
      };

      return MWClassAction;

    })(MWClass);

    MWLearn.prototype.Show = function() {
      return new MWClassShow(this);
    };

    MWLearn.prototype.MWClassShow = MWClassShow = (function(_super) {
      var MWClassShowAssemblage, MWClassShowAssemblageInstruction, MWClassShowAssemblagePart, MWClassShowChoice, MWClassShowCircle, MWClassShowColorMask, MWClassShowCompoundStimulus, MWClassShowConstructFigure, MWClassShowConstructPart, MWClassShowConstructPrompt, MWClassShowDialog, MWClassShowImage, MWClassShowInstructions, MWClassShowItemList, MWClassShowLink, MWClassShowOk, MWClassShowPath, MWClassShowProgress, MWClassShowRectangle, MWClassShowRotateStimulus, MWClassShowSquare, MWClassShowStimulus, MWClassShowStimulusGrid, MWClassShowTest, MWClassShowText, MWClassShowTimer, MWClassShowTrialRecord, MWClassShowX, MWClassShowYesNo;

      __extends(MWClassShow, _super);

      function MWClassShow() {
        return MWClassShow.__super__.constructor.apply(this, arguments);
      }

      MWClassShow.prototype.Stimulus = function(options, addDefaults) {
        if (options == null) {
          options = {};
        }
        if (addDefaults == null) {
          addDefaults = true;
        }
        return new this.MWClassShowStimulus(this.root, options, addDefaults);
      };

      MWClassShow.prototype.MWClassShowStimulus = MWClassShowStimulus = (function(_super1) {
        __extends(MWClassShowStimulus, _super1);

        MWClassShowStimulus.prototype.element = null;

        MWClassShowStimulus.prototype.handlers = null;

        MWClassShowStimulus.prototype.auto_scale = 0;

        MWClassShowStimulus.prototype._rotation = 0;

        MWClassShowStimulus.prototype._scale = 1;

        MWClassShowStimulus.prototype._translation = [0, 0];

        MWClassShowStimulus.prototype._defaults = {
          x: 0,
          y: 0,
          width: 100,
          height: 100,
          color: "black"
        };

        MWClassShowStimulus.prototype._show_state = true;

        MWClassShowStimulus.prototype._mousedown = null;

        MWClassShowStimulus.prototype._mouseup = null;

        MWClassShowStimulus.prototype._mouseover = null;

        MWClassShowStimulus.prototype._mouseout = null;

        function MWClassShowStimulus(root, options, addDefaults) {
          var name, value, _ref;
          MWClassShowStimulus.__super__.constructor.call(this, root);
          this.handlers = {};
          options = this.parseOptions(options, {}, addDefaults);
          this.auto_scale = (_ref = options.auto_scale) != null ? _ref : 1;
          for (name in options) {
            value = options[name];
            this.attr(name, value);
          }
        }

        MWClassShowStimulus.prototype.parseOptions = function(options, defaults, addDefaults) {
          var def;
          if (defaults == null) {
            defaults = {};
          }
          if (addDefaults == null) {
            addDefaults = true;
          }
          def = addDefaults ? merge(this._defaults, defaults) : copyobj(defaults);
          if ((options.l != null) && (def.x != null)) {
            delete def.x;
          }
          if ((options.t != null) && (def.y != null)) {
            delete def.y;
          }
          return merge(def, options);
        };

        MWClassShowStimulus.prototype.H_STRINGS = ['width', 'x', 'cx', 'l', 'cl', 'lc', 'h'];

        MWClassShowStimulus.prototype.V_STRINGS = ['height', 'y', 'cy', 't', 'ct', 'tc', 'v'];

        MWClassShowStimulus.prototype.isH = function(type) {
          return this.H_STRINGS.indexOf(type) !== -1;
        };

        MWClassShowStimulus.prototype.isV = function(type) {
          return this.V_STRINGS.indexOf(type) !== -1;
        };

        MWClassShowStimulus.prototype.addc = function(x, type) {
          if (type[0] === 'c') {
            return "c" + x;
          } else {
            return x;
          }
        };

        MWClassShowStimulus.prototype.type2wh = function(type) {
          if (this.isH(type)) {
            return 'width';
          } else {
            return 'height';
          }
        };

        MWClassShowStimulus.prototype.type2xy = function(type) {
          return this.addc((this.isH(type) ? 'x' : 'y'), type);
        };

        MWClassShowStimulus.prototype.type2lt = function(type) {
          return this.addc((this.isH(type) ? 'l' : 't'), type);
        };

        MWClassShowStimulus.prototype.type2hv = function(type) {
          if (this.isH(type)) {
            return 'h';
          } else if (this.isV(type)) {
            return 'v';
          } else {
            return 'other';
          }
        };

        MWClassShowStimulus.prototype.x2lc = function(x) {
          return x + this.root.width() / 2;
        };

        MWClassShowStimulus.prototype.lc2x = function(l) {
          return l - this.root.width() / 2;
        };

        MWClassShowStimulus.prototype.y2tc = function(y) {
          return y + this.root.height() / 2;
        };

        MWClassShowStimulus.prototype.tc2y = function(t) {
          return t - this.root.height() / 2;
        };

        MWClassShowStimulus.prototype.x2l = function(x, width) {
          if (width == null) {
            width = null;
          }
          return this.x2lc(x) - (width != null ? width : this.attr("width")) / 2;
        };

        MWClassShowStimulus.prototype.l2x = function(l, width) {
          if (width == null) {
            width = null;
          }
          return this.lc2x(l) + (width != null ? width : this.attr("width")) / 2;
        };

        MWClassShowStimulus.prototype.y2t = function(y, height) {
          if (height == null) {
            height = null;
          }
          return this.y2tc(y) - (height != null ? height : this.attr("height")) / 2;
        };

        MWClassShowStimulus.prototype.t2y = function(t, height) {
          if (height == null) {
            height = null;
          }
          return this.tc2y(t) + (height != null ? height : this.attr("height")) / 2;
        };

        MWClassShowStimulus.prototype.xy2lt = function(v, xy) {
          if (this.isH(xy)) {
            return this.x2l(v);
          } else {
            return this.y2t(v);
          }
        };

        MWClassShowStimulus.prototype.lt2xy = function(v, xy) {
          if (this.isH(xy)) {
            return this.l2x(v);
          } else {
            return this.t2y(v);
          }
        };

        MWClassShowStimulus.prototype.xy2ltc = function(v, xy) {
          if (this.isH(xy)) {
            return this.x2lc(v);
          } else {
            return this.y2tc(v);
          }
        };

        MWClassShowStimulus.prototype.ltc2xy = function(v, xy) {
          if (this.isH(xy)) {
            return this.lc2x(v);
          } else {
            return this.tc2y(v);
          }
        };

        MWClassShowStimulus.prototype.extent = function(type) {
          switch (this.type2hv(type)) {
            case 'h':
              return this.root.width();
            case 'v':
              return this.root.height();
            default:
              return (this.root.height() + this.root.width()) / 2;
          }
        };

        MWClassShowStimulus.prototype.norm2px = function(x, type) {
          return x * this.extent(type);
        };

        MWClassShowStimulus.prototype.px2norm = function(x, type) {
          return x / this.extent(type);
        };

        MWClassShowStimulus.prototype.maxBox = function() {
          var hMax, hTotal, wMax, wTotal;
          wTotal = this.root.width();
          hTotal = this.root.height();
          wMax = wTotal - 2 * Math.abs(this.attr('x'));
          hMax = hTotal - 2 * Math.abs(this.attr('y'));
          return [this.auto_scale * wMax, this.auto_scale * hMax];
        };

        MWClassShowStimulus.prototype.attr = function(name, value) {
          var box, h, lt, r, ret, sCur, w, wh, xy;
          switch (name) {
            case "color":
              ret = this.element.attr("fill", value);
              break;
            case "width":
            case "height":
              if (value != null) {
                if (value === 'auto') {
                  this.attr('box', this.maxBox());
                } else {
                  sCur = this.element.attr(name);
                  this.element.attr(name, value);
                  xy = this.type2xy(name);
                  this.attr(xy, this.attr(xy) - (value - sCur) / 2);
                }
              } else {
                ret = this.element.attr(name);
              }
              break;
            case "x":
            case "y":
              lt = this.type2lt(name);
              if (value != null) {
                this.attr(lt, this.xy2lt(value, name));
              } else {
                ret = this.lt2xy(this.attr(lt), name);
              }
              break;
            case "l":
            case "t":
              xy = this.type2xy(name);
              if (value != null) {
                this.element.attr(xy, value);
              } else {
                ret = this.element.attr(xy);
              }
              break;
            case "cx":
            case "cy":
              wh = this.type2wh(name);
              if (value != null) {
                this.element.attr(name, this.xy2lt(value, name) + this.attr(wh) / 2);
              } else {
                ret = this.lt2xy(this.element.attr(name), name) - this.attr(wh) / 2;
              }
              break;
            case "lc":
            case "tc":
              lt = name[0];
              wh = this.type2wh(name);
              if (value != null) {
                this.attr(lt, value - this.attr(wh) / 2);
              } else {
                ret = this.attr(lt) + this.attr(wh) / 2;
              }
              break;
            case "mousedown":
            case "mouseup":
            case "mouseover":
            case "mouseout":
              if (value != null) {
                this["_" + name] = value;
                this.element[name](value);
              } else {
                ret = this["_" + name];
              }
              break;
            case "box":
              w = this.attr("width");
              h = this.attr("height");
              ret = box = [w, h];
              if (value != null) {
                if (!Array.isArray(value)) {
                  value = [value, value];
                }
                r = divide(value, box);
                if (r[0] < r[1]) {
                  this.attr("width", value[0]);
                  this.attr("height", h * r[0]);
                } else {
                  this.attr("width", w * r[1]);
                  this.attr("height", value[1]);
                }
              }
              break;
            case "show":
              if (value != null) {
                this._show_state = value;
                if (value) {
                  this.element.show();
                } else {
                  this.element.hide();
                }
              } else {
                ret = this._show_state;
              }
              break;
            default:
              ret = this.element.attr(name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowStimulus.prototype.contain = function() {
          var h, hTotal, l, t, w, wTotal;
          wTotal = this.root.width();
          hTotal = this.root.height();
          w = this.attr("width");
          h = this.attr("height");
          l = this.attr("l");
          t = this.attr("t");
          if (l + w > wTotal) {
            this.attr("box", [Math.max(0, 2 * (wTotal - (l + w / 2))), h]);
          } else if (l < 0) {
            this.attr("box", [Math.max(0, 2 * (l + w / 2)), h]);
          }
          if (t + h > hTotal) {
            return this.attr("box", [w, Math.max(0, 2 * (hTotal - (t + h / 2)))]);
          } else if (t < 0) {
            return this.attr("box", [w, Math.max(0, 2 * (t + h / 2))]);
          }
        };

        MWClassShowStimulus.prototype._settransform = function() {
          return this.element.transform("r" + this._rotation + ",s" + this._scale + ",t" + this._translation);
        };

        MWClassShowStimulus.prototype.rotate = function(a, xc, yc) {
          var r, theta, xDiff, yDiff;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          if ((xc != null) || (yc != null)) {
            xc = xc != null ? xc : this.attr("x");
            yc = yc != null ? yc : this.attr("y");
            xDiff = (this.attr("x")) - xc;
            yDiff = (this.attr("y")) - yc;
            r = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
            theta = Math.atan2(yDiff, xDiff);
            theta += a * Math.PI / 180;
            this.attr("x", r * Math.cos(theta) + xc);
            this.attr("y", r * Math.sin(theta) + yc);
          }
          this._rotation = (this._rotation + a) % 360;
          return this._settransform();
        };

        MWClassShowStimulus.prototype.scale = function(s, xc, yc) {
          var r, theta, xDiff, yDiff;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          if ((xc != null) || (yc != null)) {
            xc = xc != null ? xc : this.attr("x");
            yc = yc != null ? yc : this.attr("y");
            xDiff = (this.attr("x")) - xc;
            yDiff = (this.attr("y")) - yc;
            r = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
            theta = Math.atan2(yDiff, xDiff);
            r *= s;
            this.attr("x", r * Math.cos(theta) + xc);
            this.attr("y", r * Math.sin(theta) + yc);
          }
          this._scale = s * this._scale;
          return this._settransform();
        };

        MWClassShowStimulus.prototype.translate = function(x, y) {
          if (x == null) {
            x = 0;
          }
          if (y == null) {
            y = 0;
          }
          this._translation[0] += x;
          this._translation[1] += y;
          return this._settransform();
        };

        MWClassShowStimulus.prototype.remove = function() {
          if (this.element != null) {
            this.element.remove();
            return this.element = null;
          }
        };

        MWClassShowStimulus.prototype.mousedown = function(f) {
          return this.attr("mousedown", f);
        };

        MWClassShowStimulus.prototype.mouseup = function(f) {
          return this.attr("mouseup", f);
        };

        MWClassShowStimulus.prototype.mouseover = function(f) {
          return this.attr("mouseover", f);
        };

        MWClassShowStimulus.prototype.mouseout = function(f) {
          return this.attr("mouseout", f);
        };

        MWClassShowStimulus.prototype.show = function(state) {
          if (state == null) {
            state = null;
          }
          return this.attr("show", state);
        };

        MWClassShowStimulus.prototype.exists = function() {
          return this.element != null;
        };

        return MWClassShowStimulus;

      })(MWClass);

      MWClassShow.prototype.CompoundStimulus = function(elements, options) {
        if (options == null) {
          options = {};
        }
        return new this.MWClassShowCompoundStimulus(this.root, elements, options);
      };

      MWClassShow.prototype.MWClassShowCompoundStimulus = MWClassShowCompoundStimulus = (function(_super1) {
        __extends(MWClassShowCompoundStimulus, _super1);

        MWClassShowCompoundStimulus.prototype._defaultElement = 0;

        MWClassShowCompoundStimulus.prototype._background = null;

        MWClassShowCompoundStimulus.prototype._backgroundOffset = 0;

        function MWClassShowCompoundStimulus(root, elements, options) {
          var _ref, _ref1;
          options.background = (_ref = options.background) != null ? _ref : null;
          this._backgroundOffset = (_ref1 = options.background_offset) != null ? _ref1 : 1;
          this.element = copyarray((elements instanceof MWClassShowCompoundStimulus ? elements.element : elements));
          if (options.background != null) {
            if (options.background === true) {
              options.background = root.background;
            }
            this._background = root.show.Rectangle({
              color: options.background
            });
          }
          MWClassShowCompoundStimulus.__super__.constructor.call(this, root, options, false);
          if (options.background != null) {
            if (this.element.length > 0) {
              this._background.element.insertBefore(this.element[0].element);
            }
            this.updateBackground(['width', 'height', 'x', 'y', 'show', 'mousedown', 'mouseup', 'mouseover', 'mouseout']);
          }
        }

        MWClassShowCompoundStimulus.prototype.attr = function(name, value) {
          var el, fSize, ffEvent, i, n, pAll, pCur, pHigh, pLow, pMid, pMove, ret, sAll, sCur, xy, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _ref1, _ref2, _ref3, _ref4;
          switch (name) {
            case "width":
            case "height":
              xy = this.type2xy(name);
              n = this.element.length;
              if (n === 0) {
                sCur = 0;
                pMid = 0;
              } else {
                sAll = (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.element;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    el = _ref[_i];
                    _results.push(el.attr(name));
                  }
                  return _results;
                }).call(this);
                pAll = (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.element;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    el = _ref[_i];
                    _results.push(el.attr(xy));
                  }
                  return _results;
                }).call(this);
                pLow = Math.min.apply(Math, (function() {
                  var _i, _ref, _results;
                  _results = [];
                  for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    _results.push(pAll[i] - sAll[i] / 2);
                  }
                  return _results;
                })());
                pHigh = Math.max.apply(Math, (function() {
                  var _i, _ref, _results;
                  _results = [];
                  for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    _results.push(pAll[i] + sAll[i] / 2);
                  }
                  return _results;
                })());
                pMid = (pLow + pHigh) / 2;
                sCur = pHigh - pLow;
              }
              if (value != null) {
                fSize = value / sCur;
                if (n > 0) {
                  for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    this.element[i].attr(name, fSize * sAll[i]);
                  }
                  for (i = _j = 0, _ref1 = n - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                    this.element[i].attr(xy, fSize * (pAll[i] - pMid) + pMid);
                  }
                  this.updateBackground([name, xy]);
                }
              } else {
                ret = sCur;
              }
              break;
            case "l":
            case "t":
              n = this.element.length;
              if (n === 0) {
                ret = pCur = (function() {
                  switch (name) {
                    case "l":
                      return this.root.width() / 2;
                    case "t":
                      return this.root.height() / 2;
                    default:
                      throw 'wtf?';
                  }
                }).call(this);
              } else {
                ret = pCur = Math.min.apply(Math, (function() {
                  var _k, _len, _ref2, _results;
                  _ref2 = this.element;
                  _results = [];
                  for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
                    el = _ref2[_k];
                    _results.push(el.attr(name));
                  }
                  return _results;
                }).call(this));
              }
              if (value != null) {
                pMove = value - pCur;
                if (n > 0) {
                  _ref2 = this.element;
                  for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
                    el = _ref2[_k];
                    el.attr(name, el.attr(name) + pMove);
                  }
                  this.updateBackground(name);
                }
              }
              break;
            case "cl":
            case "ct":
              ret = this.attr("" + name[1] + "c", value);
              break;
            case "box":
            case "x":
            case "y":
            case "cx":
            case "cy":
            case "lc":
            case "tc":
              ret = MWClassShowCompoundStimulus.__super__.attr.call(this, name, value);
              if (value != null) {
                this.updateBackground(name);
              }
              break;
            case "element_mousedown":
              ffEvent = function(elm) {
                return function(e, x, y) {
                  return value(elm, x, y);
                };
              };
              _ref3 = this.element;
              for (_l = 0, _len1 = _ref3.length; _l < _len1; _l++) {
                el = _ref3[_l];
                el.attr("mousedown", ffEvent(el));
              }
              if (this._background != null) {
                this._background.attr("mousedown", ffEvent(this._background));
              }
              break;
            default:
              if (value != null) {
                _ref4 = this.element;
                for (_m = 0, _len2 = _ref4.length; _m < _len2; _m++) {
                  el = _ref4[_m];
                  el.attr(name, value);
                }
                switch (name) {
                  case 'show':
                  case 'mousedown':
                  case 'mouseup':
                  case 'mouseover':
                  case 'mouseout':
                    this.updateBackground(name);
                    break;
                  default:
                    null;
                }
              } else {
                ret = this.element.length > 0 ? this.element[this._defaultElement].attr(name) : null;
              }
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowCompoundStimulus.prototype._settransform = function() {
          var el, _i, _len, _ref, _results;
          _ref = this.element;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results.push(el._settransform());
          }
          return _results;
        };

        MWClassShowCompoundStimulus.prototype.rotate = function(a, xc, yc) {
          var el, _i, _len, _ref, _results;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          xc = xc != null ? xc : this.attr('x');
          yc = yc != null ? yc : this.attr('y');
          this._rotation = (this._rotation + a) % 360;
          _ref = this.element;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results.push(el.rotate(a, xc, yc));
          }
          return _results;
        };

        MWClassShowCompoundStimulus.prototype.scale = function(s, xc, yc) {
          var el, _i, _len, _ref, _results;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          xc = xc != null ? xc : this.attr('x');
          yc = yc != null ? yc : this.attr('y');
          this._scale = s * this._scale;
          _ref = this.element;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results.push(el.scale(s, xc, yc));
          }
          return _results;
        };

        MWClassShowCompoundStimulus.prototype.remove = function(el, removeElement) {
          var idx, _i, _len, _ref;
          if (el == null) {
            el = null;
          }
          if (removeElement == null) {
            removeElement = true;
          }
          if (el != null) {
            if (!(el instanceof MWClassShowStimulus)) {
              idx = el;
            } else {
              idx = find(this.element, el)[0];
            }
            if (removeElement) {
              this.element[idx].remove();
            }
            this.element.splice(idx, 1);
          } else {
            if (removeElement) {
              _ref = this.element;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                el = _ref[_i];
                el.remove();
              }
            }
            this.element = [];
          }
          if (this._background != null) {
            return this._background.remove();
          }
        };

        MWClassShowCompoundStimulus.prototype.exists = function() {
          return this.element.length > 0;
        };

        MWClassShowCompoundStimulus.prototype.addElement = function(el) {
          this.element.push(el);
          if (!this._show_state) {
            return el.show(false);
          }
        };

        MWClassShowCompoundStimulus.prototype.removeElement = function(el) {
          var idx;
          idx = this.getElementIndex(el);
          this.element[idx].remove();
          return this.element.splice(idx, 1);
        };

        MWClassShowCompoundStimulus.prototype.getElement = function(el) {
          if (el instanceof MWClassShowStimulus) {
            return el;
          } else {
            return this.element[el];
          }
        };

        MWClassShowCompoundStimulus.prototype.getElementIndex = function(el) {
          if (!(el instanceof MWClassShowStimulus)) {
            return el;
          } else {
            return find(this.element, el)[0];
          }
        };

        MWClassShowCompoundStimulus.prototype.updateBackground = function(param) {
          var p, _i, _len, _ref, _results;
          if (this._background != null) {
            _ref = forceArray(param);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              switch (p) {
                case 'width':
                case 'height':
                  _results.push(this._background.attr(p, Math.max(0, this.attr(p) - 2 * this._backgroundOffset)));
                  break;
                case 'box':
                  _results.push(this.updateBackground(['width', 'height']));
                  break;
                case 'l':
                case 't':
                  _results.push(this._background.attr(p, this.attr(p) + this._backgroundOffset));
                  break;
                default:
                  _results.push(this._background.attr(p, this.attr(p)));
              }
            }
            return _results;
          }
        };

        return MWClassShowCompoundStimulus;

      })(MWClassShowStimulus);

      MWClassShow.prototype.StimulusGrid = function(elements, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowStimulusGrid(this.root, elements, options);
      };

      MWClassShow.prototype.MWClassShowStimulusGrid = MWClassShowStimulusGrid = (function(_super1) {
        __extends(MWClassShowStimulusGrid, _super1);

        MWClassShowStimulusGrid.prototype.padding = null;

        MWClassShowStimulusGrid.prototype._attr = null;

        function MWClassShowStimulusGrid(root, elements, options) {
          var _ref, _ref1, _ref2;
          options.width = (_ref = options.width) != null ? _ref : root.width();
          options.height = (_ref1 = options.height) != null ? _ref1 : root.height();
          this.padding = (_ref2 = options.padding) != null ? _ref2 : 8;
          this._attr = {
            width: options.width,
            height: options.height
          };
          MWClassShowStimulusGrid.__super__.constructor.call(this, root, elements, options);
        }

        MWClassShowStimulusGrid.prototype.attr = function(name, value) {
          var ret;
          switch (name) {
            case 'width':
            case 'height':
              if (value != null) {
                this._attr[name] = value;
                this.updatePositions();
              } else {
                ret = this._attr[name];
              }
              break;
            default:
              MWClassShowStimulusGrid.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowStimulusGrid.prototype.addElement = function(el) {
          MWClassShowStimulusGrid.__super__.addElement.call(this, el);
          return this.updatePositions();
        };

        MWClassShowStimulusGrid.prototype.removeElement = function(el) {
          MWClassShowStimulusGrid.__super__.removeElement.call(this, el);
          return this.updatePositions();
        };

        MWClassShowStimulusGrid.prototype.updatePositions = function(w, h) {
          var c, cols, hFinal, hMax, hPer, idx, n, r, rows, wFinal, wMax, wPer, x, y, _i, _ref, _ref1, _results;
          if (w == null) {
            w = null;
          }
          if (h == null) {
            h = null;
          }
          n = this.element.length;
          _ref = squareGrid(n), rows = _ref[0], cols = _ref[1];
          w = w != null ? w : this.attr('width');
          h = h != null ? h : this.attr('height');
          wMax = w - (cols - 1) * this.padding;
          hMax = h - (rows - 1) * this.padding;
          wPer = wMax / cols;
          hPer = hMax / rows;
          wFinal = wPer * cols + this.padding * (cols - 1);
          hFinal = hPer * rows + this.padding * (rows - 1);
          _results = [];
          for (r = _i = 0, _ref1 = rows - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; r = 0 <= _ref1 ? ++_i : --_i) {
            _results.push((function() {
              var _j, _ref2, _results1;
              _results1 = [];
              for (c = _j = 0, _ref2 = cols - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; c = 0 <= _ref2 ? ++_j : --_j) {
                idx = cols * r + c;
                if (idx < n) {
                  x = -(wFinal - wPer) / 2 + c * (wPer + this.padding);
                  y = -(hFinal - hPer) / 2 + r * (hPer + this.padding);
                  this.element[idx].attr('box', [wPer, hPer]);
                  this.element[idx].attr('x', x);
                  _results1.push(this.element[idx].attr('y', y));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          }
          return _results;
        };

        return MWClassShowStimulusGrid;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.Choice = function(elements, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowChoice(this.root, elements, options);
      };

      MWClassShow.prototype.MWClassShowChoice = MWClassShowChoice = (function(_super1) {
        __extends(MWClassShowChoice, _super1);

        MWClassShowChoice.prototype.choiceMade = false;

        MWClassShowChoice.prototype.choice = null;

        MWClassShowChoice.prototype.callback = null;

        MWClassShowChoice.prototype.callback_delay = null;

        MWClassShowChoice.prototype.timeout = null;

        MWClassShowChoice.prototype._tStart = 0;

        MWClassShowChoice.prototype._tChoice = 0;

        MWClassShowChoice.prototype._choiceInclude = null;

        MWClassShowChoice.prototype._instruction = null;

        MWClassShowChoice.prototype._padx = null;

        MWClassShowChoice.prototype._pady = null;

        MWClassShowChoice.prototype._autoposition = false;

        MWClassShowChoice.prototype._autosize = false;

        MWClassShowChoice.prototype._choiceLocation = null;

        function MWClassShowChoice(root, elements, options) {

          /*
            elements: an array of Stimulus objects
            options:
              instruct: the instruction to give
              autoposition: true to autoposition the elements
              autosize: true to autosize the choices
              choice_location: location of the choices (for autoposition). either
                               'middle' or 'bottom'
              choice_include: an array of indices of Stimulus objects to include
                              as choices
              callback: a function that takes this object and the chosen index as
                        inputs
              callback_delay: the delay, in milliseconds, before calling the
                              callback
              timeout: number of milliseconds before the choice times out
              pad: the padding in between each choice as a percentage of the total
                   canvas size
              padx: pad specifically for horizontal padding
              pady: pad specifically for vertical padding
           */
          var fDown, idx, _i, _j, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
          MWClassShowChoice.__super__.constructor.call(this, root, elements, options);
          options.instruct = (_ref = options.instruct) != null ? _ref : "Choose one.";
          this._autoposition = (_ref1 = options.autoposition) != null ? _ref1 : true;
          this._autosize = (_ref2 = options.autosize) != null ? _ref2 : true;
          this._choiceLocation = (_ref3 = options.choice_location) != null ? _ref3 : 'middle';
          options.pad = (_ref4 = options.pad) != null ? _ref4 : null;
          this._padx = (_ref5 = options.padx) != null ? _ref5 : (_ref6 = options.pad) != null ? _ref6 : 5;
          this._pady = (_ref7 = options.pady) != null ? _ref7 : (_ref8 = options.pad) != null ? _ref8 : 10;
          this.callback = (_ref9 = options.callback) != null ? _ref9 : null;
          this.callback_delay = (_ref10 = options.callback_delay) != null ? _ref10 : 0;
          this.timeout = (_ref11 = options.timeout) != null ? _ref11 : null;
          options.choice_include = (_ref12 = options.choice_include) != null ? _ref12 : (function() {
            _results = [];
            for (var _i = 0, _ref13 = this.element.length - 1; 0 <= _ref13 ? _i <= _ref13 : _i >= _ref13; 0 <= _ref13 ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
          this._choiceInclude = (function() {
            var _j, _len, _ref14, _results1;
            _ref14 = options.choice_include;
            _results1 = [];
            for (_j = 0, _len = _ref14.length; _j < _len; _j++) {
              idx = _ref14[_j];
              _results1.push(this.element[idx]);
            }
            return _results1;
          }).call(this);
          for (idx = _j = 0, _ref14 = this._choiceInclude.length - 1; 0 <= _ref14 ? _j <= _ref14 : _j >= _ref14; idx = 0 <= _ref14 ? ++_j : --_j) {
            fDown = ((function(_this) {
              return function(i) {
                return function(e, x, y) {
                  return _this.choiceEvent(i);
                };
              };
            })(this))(idx);
            this._choiceInclude[idx].mousedown(fDown);
          }
          if (options.instruct !== false) {
            this._instruction = root.show.Instructions(options.instruct);
            this.element.push(this._instruction);
          }
          this.autoPosition();
          this._tStart = this.root.time.Now();
          if (this.timeout != null) {
            window.setTimeout(((function(_this) {
              return function() {
                return _this.choiceEvent(null);
              };
            })(this)), this.timeout);
          }
        }

        MWClassShowChoice.prototype.autoPosition = function() {
          var el, elH, elW, hFinalMax, hInstruct, hMax, hScale, hTotal, idx, nEl, padHPx, padWPx, scale, wFinalMax, wMax, wScale, wTotal, xCur, yChoice, yInstruct, _i, _j, _len, _len1, _ref, _ref1;
          hInstruct = this._instruction != null ? this._instruction.attr("height") : 0;
          nEl = this._choiceInclude.length;
          wTotal = this.root.width();
          hTotal = this.root.height();
          padWPx = wTotal * this._padx / 100;
          padHPx = hTotal * this._pady / 100;
          wFinalMax = Math.max(10, (wTotal - (nEl + 1) * padWPx) / nEl);
          hFinalMax = Math.max(10, 2 * (hTotal / 2 - hInstruct - padHPx));
          elW = (function() {
            var _i, _len, _ref, _results;
            _ref = this._choiceInclude;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              el = _ref[_i];
              _results.push(el.attr("width"));
            }
            return _results;
          }).call(this);
          elH = (function() {
            var _i, _len, _ref, _results;
            _ref = this._choiceInclude;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              el = _ref[_i];
              _results.push(el.attr("height"));
            }
            return _results;
          }).call(this);
          wMax = Math.max.apply(Math, elW);
          hMax = Math.max.apply(Math, elH);
          if (this._autosize) {
            wScale = wFinalMax / wMax;
            hScale = hFinalMax / hMax;
            scale = Math.min(wScale, hScale);
            _ref = this._choiceInclude;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              el = _ref[_i];
              el.attr("box", [scale * el.attr("width"), scale * el.attr("height")]);
            }
            elW = (function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this._choiceInclude;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                el = _ref1[_j];
                _results.push(el.attr("width"));
              }
              return _results;
            }).call(this);
            elH = (function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this._choiceInclude;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                el = _ref1[_j];
                _results.push(el.attr("height"));
              }
              return _results;
            }).call(this);
            wMax = Math.max.apply(Math, elW);
            hMax = Math.max.apply(Math, elH);
          }
          if (this._autoposition) {
            yChoice = (function() {
              switch (this._choiceLocation) {
                case 'middle':
                  return 0;
                case 'bottom':
                  return (hTotal - hMax) / 2 - padHPx;
                default:
                  throw 'Invalid choice location';
              }
            }).call(this);
            wTotal = sum(elW) + padWPx * (nEl - 1) - elW[0] / 2 - elW.slice(-1) / 2;
            xCur = -wTotal / 2;
            _ref1 = this._choiceInclude;
            for (idx = _j = 0, _len1 = _ref1.length; _j < _len1; idx = ++_j) {
              el = _ref1[idx];
              el.attr("x", xCur);
              el.attr("y", yChoice);
              xCur += elW[idx] + padWPx;
            }
          }
          if (this._instruction != null) {
            yInstruct = (function() {
              switch (this._choiceLocation) {
                case 'middle':
                  return hMax / 2 + padHPx;
                case 'bottom':
                  return 0;
                default:
                  throw 'Invalid choice location';
              }
            }).call(this);
            return this._instruction.attr("y", yInstruct);
          }
        };

        MWClassShowChoice.prototype.choiceEvent = function(idx) {
          if (!this.choiceMade) {
            this._tChoice = this.root.time.Now();
            this.choiceMade = true;
            this.choice = idx;
            if (this.callback != null) {
              return window.setTimeout(((function(_this) {
                return function() {
                  return _this.callback(_this, idx);
                };
              })(this)), this.callback_delay);
            }
          }
        };

        return MWClassShowChoice;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.Test = function(elements, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowTest(this.root, elements, options);
      };

      MWClassShow.prototype.MWClassShowTest = MWClassShowTest = (function(_super1) {
        __extends(MWClassShowTest, _super1);

        MWClassShowTest.prototype.correct = null;

        function MWClassShowTest(root, elements, options) {
          var el, idx, _i, _j, _len, _len1, _ref, _ref1, _ref2;
          if (options == null) {
            options = {};
          }

          /*
            elements: an array of Stimulus objects
            options:
              correct: the index of the correct choice / array of indices. if this
                       is unspecified, then each Stimulus object should have a
                       boolean property named "correct" the specifies whether the
                       Stimulus is a correct choice.
           */
          this.root = root;
          options.correct = forceArray((_ref = options.correct) != null ? _ref : null);
          MWClassShowTest.__super__.constructor.call(this, root, elements, options);
          if (options.correct != null) {
            _ref1 = this.element;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              el = _ref1[_i];
              el.correct = false;
            }
            _ref2 = options.correct;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              idx = _ref2[_j];
              this.element[idx].correct = true;
            }
          }
        }

        MWClassShowTest.prototype.choiceEvent = function(idx) {
          this.correct = idx != null ? this.element[idx].correct : false;
          return MWClassShowTest.__super__.choiceEvent.call(this, idx);
        };

        return MWClassShowTest;

      })(MWClassShowChoice);

      MWClassShow.prototype.Dialog = function(prompt, choices, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowDialog(this.root, prompt, choices, options);
      };

      MWClassShow.prototype.MWClassShowDialog = MWClassShowDialog = (function(_super1) {
        __extends(MWClassShowDialog, _super1);

        MWClassShowDialog.prototype._userCallback = null;

        function MWClassShowDialog(root, prompt, choices, options) {
          var ch, choice, _i, _len, _ref, _ref1, _ref2;
          options.autosize = (_ref = options.autosize) != null ? _ref : false;
          options['font-size'] = (_ref1 = options['font-size']) != null ? _ref1 : 48;
          choice = [];
          for (_i = 0, _len = choices.length; _i < _len; _i++) {
            ch = choices[_i];
            choice.push(root.show.Link('javascript:void(0)', ch, {
              'font-size': options['font-size']
            }));
          }
          options.instruct = prompt;
          options.choice_location = (_ref2 = options.choice_location) != null ? _ref2 : 'bottom';
          this._userCallback = options.callback;
          options.callback = (function(_this) {
            return function(choice, idx) {
              choice.remove();
              if (_this._userCallback != null) {
                return _this.runUserCallback(idx);
              }
            };
          })(this);
          MWClassShowDialog.__super__.constructor.call(this, root, choice, options);
        }

        MWClassShowDialog.prototype.runUserCallback = function(idx) {
          return this._userCallback(idx);
        };

        return MWClassShowDialog;

      })(MWClassShowChoice);

      MWClassShow.prototype.YesNo = function(prompt, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowYesNo(this.root, prompt, options);
      };

      MWClassShow.prototype.MWClassShowYesNo = MWClassShowYesNo = (function(_super1) {
        __extends(MWClassShowYesNo, _super1);

        function MWClassShowYesNo(root, prompt, options) {
          MWClassShowYesNo.__super__.constructor.call(this, root, prompt, ['YES', 'NO'], options);
        }

        MWClassShowYesNo.prototype.runUserCallback = function(idx) {
          return this._userCallback(idx === 0);
        };

        return MWClassShowYesNo;

      })(MWClassShowDialog);

      MWClassShow.prototype.Ok = function(prompt, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowOk(this.root, prompt, options);
      };

      MWClassShow.prototype.MWClassShowOk = MWClassShowOk = (function(_super1) {
        __extends(MWClassShowOk, _super1);

        function MWClassShowOk(root, prompt, options) {
          MWClassShowOk.__super__.constructor.call(this, root, prompt, ['OK'], options);
        }

        MWClassShowOk.prototype.runUserCallback = function(idx) {
          return this._userCallback();
        };

        return MWClassShowOk;

      })(MWClassShowDialog);

      MWClassShow.prototype.Rectangle = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowRectangle(this.root, options);
      };

      MWClassShow.prototype.MWClassShowRectangle = MWClassShowRectangle = (function(_super1) {
        __extends(MWClassShowRectangle, _super1);

        function MWClassShowRectangle(root, options) {
          var h, l, t, w, _ref;
          this.root = root;
          options = this.parseOptions(options);
          options.stroke = (_ref = options.stroke) != null ? _ref : "none";
          l = this.x2l(options.x, options.width);
          t = this.y2t(options.y, options.height);
          w = options.width;
          h = options.height;
          this.element = root.paper.rect(l, t, w, h);
          options = remove(options, ['width', 'height', 'x', 'y']);
          MWClassShowRectangle.__super__.constructor.call(this, root, options, false);
        }

        return MWClassShowRectangle;

      })(MWClassShowStimulus);

      MWClassShow.prototype.Square = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowSquare(this.root, options);
      };

      MWClassShow.prototype.MWClassShowSquare = MWClassShowSquare = (function(_super1) {
        __extends(MWClassShowSquare, _super1);

        function MWClassShowSquare(root, options) {
          this.root = root;
          if (options.width != null) {
            options.height = options.width;
          }
          if (options.height != null) {
            options.width = options.height;
          }
          options = this.parseOptions(options);
          MWClassShowSquare.__super__.constructor.call(this, root, options);
        }

        MWClassShowSquare.prototype.attr = function(name, value) {
          switch (name) {
            case "length":
            case "width":
            case "height":
              MWClassShowSquare.__super__.attr.call(this, "width", value);
              return MWClassShowSquare.__super__.attr.call(this, "height", value);
            default:
              return MWClassShowSquare.__super__.attr.call(this, name, value);
          }
        };

        return MWClassShowSquare;

      })(MWClassShowRectangle);

      MWClassShow.prototype.Circle = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowCircle(this.root, options);
      };

      MWClassShow.prototype.MWClassShowCircle = MWClassShowCircle = (function(_super1) {
        __extends(MWClassShowCircle, _super1);

        function MWClassShowCircle(root, options) {
          var cl, ct, r;
          this.root = root;
          options = this.parseOptions(options, {
            r: this._defaults.width / 2
          });
          cl = this.x2l(options.x, 2 * options.r) + options.r;
          ct = this.y2t(options.y, 2 * options.r) + options.r;
          r = options.r;
          this.element = root.paper.circle(cl, ct, r);
          options = remove(options, ['x', 'y', 'r', 'width', 'height']);
          MWClassShowCircle.__super__.constructor.call(this, root, options, false);
          this.element.attr("stroke", "none");
        }

        MWClassShowCircle.prototype.attr = function(name, value) {
          var ret, wh, xy;
          switch (name) {
            case "width":
            case "height":
              if (value != null) {
                if (value === 'auto') {
                  return MWClassShowCircle.__super__.attr.call(this, name, value);
                } else {
                  return MWClassShowCircle.__super__.attr.call(this, "r", value / 2);
                }
              } else {
                return 2 * MWClassShowCircle.__super__.attr.call(this, "r");
              }
              break;
            case "l":
            case "t":
              xy = "c" + (this.type2xy(name));
              wh = this.type2wh(name);
              if (value != null) {
                return this.element.attr(xy, value + this.attr(wh) / 2);
              } else {
                return ret = this.element.attr(xy) - this.attr(wh) / 2;
              }
              break;
            default:
              return MWClassShowCircle.__super__.attr.call(this, name, value);
          }
        };

        return MWClassShowCircle;

      })(MWClassShowStimulus);

      MWClassShow.prototype.Text = function(text, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowText(this.root, text, options);
      };

      MWClassShow.prototype.MWClassShowText = MWClassShowText = (function(_super1) {
        __extends(MWClassShowText, _super1);

        MWClassShowText.prototype._max_width = 0;

        MWClassShowText.prototype._max_height = 0;

        function MWClassShowText(root, text, options) {
          this.root = root;
          this.element = root.paper.text(0, 0, text);
          options = this.parseOptions(options, {
            "font-family": "Arial",
            "font-size": 18,
            "text-anchor": "start",
            "max-width": root.width(),
            "max-height": root.height()
          });
          options = remove(options, ['width', 'height']);
          MWClassShowText.__super__.constructor.call(this, root, options, false);
        }

        MWClassShowText.prototype.attr = function(name, value) {
          var f, fontSize, fontSizeNew, ret, sCur, tActual, ta, x, y;
          switch (name) {
            case "l":
              ta = this.attr("text-anchor");
              switch (ta) {
                case "middle":
                  if (value != null) {
                    MWClassShowText.__super__.attr.call(this, name, value + this.attr('width') / 2);
                  } else {
                    ret = MWClassShowText.__super__.attr.call(this, name) - this.attr('width') / 2;
                  }
                  break;
                default:
                  ret = MWClassShowText.__super__.attr.call(this, name, value);
              }
              break;
            case "t":
              if (value != null) {
                tActual = Math.min(this.root.height() - this.attr("height") / 2, value + this.attr("height") / 2);
                MWClassShowText.__super__.attr.call(this, name, tActual);
              } else {
                ret = MWClassShowText.__super__.attr.call(this, name) - this.attr("height") / 2;
              }
              break;
            case "width":
            case "height":
              if (value != null) {
                if (value === 'auto') {
                  MWClassShowText.__super__.attr.call(this, name, value);
                } else {
                  sCur = this.attr(name);
                  f = value / sCur;
                  fontSize = this.attr('font-size');
                  fontSizeNew = f * fontSize;
                  this.attr("font-size", fontSizeNew);
                }
              } else {
                ret = this.element.getBBox()[name];
              }
              break;
            case "font-size":
              if (value != null) {
                x = this.attr("x");
                y = this.attr("y");
                MWClassShowText.__super__.attr.call(this, name, value);
                this.attr("x", x);
                this.attr("y", y);
              } else {
                ret = MWClassShowText.__super__.attr.call(this, name);
              }
              break;
            case "max-width":
              if (value != null) {
                this._max_width = value;
                if (this.attr("width") > this._max_width) {
                  this.attr("width", this._max_width);
                }
              } else {
                ret = this._max_width;
              }
              break;
            case "max-height":
              if (value != null) {
                this._max_height = value;
                if (this.attr("height") > this._max_height) {
                  this.attr("height", this._max_height);
                }
              } else {
                ret = this._max_height;
              }
              break;
            default:
              ret = MWClassShowText.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        return MWClassShowText;

      })(MWClassShowStimulus);

      MWClassShow.prototype.Instructions = function(text, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowInstructions(this.root, text, options);
      };

      MWClassShow.prototype.MWClassShowInstructions = MWClassShowInstructions = (function(_super1) {
        __extends(MWClassShowInstructions, _super1);

        function MWClassShowInstructions(root, text, options) {
          this.root = root;
          options = this.parseOptions(options, {
            "font-family": "Arial",
            "text-anchor": 'middle',
            "font-size": 36
          });
          MWClassShowInstructions.__super__.constructor.call(this, root, text, options);
        }

        return MWClassShowInstructions;

      })(MWClassShowText);

      MWClassShow.prototype.Link = function(url, text, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowLink(this.root, url, text, options);
      };

      MWClassShow.prototype.MWClassShowLink = MWClassShowLink = (function(_super1) {
        __extends(MWClassShowLink, _super1);

        MWClassShowLink.prototype.color = null;

        MWClassShowLink.prototype.colorHover = null;

        function MWClassShowLink(root, url, text, options) {
          var _ref, _ref1;
          options.href = url;
          this.color = options.color = (_ref = options.color) != null ? _ref : 'blue';
          this.colorHover = (_ref1 = options.color_hover) != null ? _ref1 : 'deepskyblue';
          options.mouseover = (function(_this) {
            return function() {
              return _this.attr('color', _this.colorHover);
            };
          })(this);
          options.mouseout = (function(_this) {
            return function() {
              return _this.attr('color', _this.color);
            };
          })(this);
          MWClassShowLink.__super__.constructor.call(this, root, text, options);
        }

        return MWClassShowLink;

      })(MWClassShowText);

      MWClassShow.prototype.Timer = function(tTotal, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowTimer(this.root, tTotal, options);
      };

      MWClassShow.prototype.MWClassShowTimer = MWClassShowTimer = (function(_super1) {
        __extends(MWClassShowTimer, _super1);

        MWClassShowTimer.prototype.tTotal = 0;

        MWClassShowTimer.prototype.tTimer = null;

        MWClassShowTimer.prototype.tGo = null;

        MWClassShowTimer.prototype.name = null;

        MWClassShowTimer.prototype.showms = false;

        MWClassShowTimer.prototype.prefix = null;

        MWClassShowTimer.prototype.suffix = null;

        MWClassShowTimer.prototype._timeout = null;

        MWClassShowTimer.prototype._initialized = false;

        MWClassShowTimer.prototype._intervalID = null;

        MWClassShowTimer.prototype._setTimer = function(t) {
          this.tTimer.set(t);
          return this.render();
        };

        function MWClassShowTimer(root, tTotal, options) {
          var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
          options.initialize = (_ref = options.initialize) != null ? _ref : true;
          this.tTotal = tTotal;
          this.name = (_ref1 = options.name) != null ? _ref1 : 'timer';
          this.showms = (_ref2 = options.showms) != null ? _ref2 : false;
          this.prefix = (_ref3 = options.prefix) != null ? _ref3 : null;
          this.suffix = (_ref4 = options.suffix) != null ? _ref4 : 'remaining';
          this.tUpdate = (_ref5 = options.update_interval) != null ? _ref5 : (this.showms ? 10 : 250);
          this._timeout = (_ref6 = options.timeout) != null ? _ref6 : null;
          MWClassShowTimer.__super__.constructor.call(this, root, '', options);
          if (options.initialize) {
            this.initialize();
          }
        }

        MWClassShowTimer.prototype.initialize = function() {
          if (!this._initialized) {
            this.tTimer = this.base.data.Variable("" + this.name + "_remaining", this.tTotal, {
              timeout: this._timeout,
              callback: (function(_this) {
                return function(t) {
                  return _this.render();
                };
              })(this)
            });
            this._initialized = true;
          }
          return this.render();
        };

        MWClassShowTimer.prototype.remaining = function() {
          if (this._initialized) {
            return Math.max(0, this.tGo != null ? this.tTimer.get() - (this.root.time.Now() - this.tGo) : this.tTimer.get());
          } else {
            return 0;
          }
        };

        MWClassShowTimer.prototype.nextReset = function() {
          return this.tTimer.nextReset();
        };

        MWClassShowTimer.prototype.string = function() {
          var prefix, strTime, suffix;
          strTime = time2str(this.remaining(), this.showms);
          prefix = this.prefix != null ? "" + this.prefix + ": " : '';
          suffix = this.suffix != null ? " " + this.suffix : '';
          return "" + prefix + strTime + suffix;
        };

        MWClassShowTimer.prototype.render = function() {
          return this.attr("text", this.string());
        };

        MWClassShowTimer.prototype.update = function() {
          if (this.remaining() <= 0) {
            this.stop();
          }
          return this.render();
        };

        MWClassShowTimer.prototype.go = function() {
          this.tGo = this.root.time.Now();
          return this._intervalID = window.setInterval(((function(_this) {
            return function() {
              return _this.update();
            };
          })(this)), this.tUpdate);
        };

        MWClassShowTimer.prototype.stop = function() {
          var tRemain;
          if (this._intervalID != null) {
            clearInterval(this._intervalID);
          }
          tRemain = this.remaining();
          this.tGo = null;
          return this._setTimer(tRemain);
        };

        return MWClassShowTimer;

      })(MWClassShowText);

      MWClassShow.prototype.ItemList = function(items, options) {
        if (items == null) {
          items = {};
        }
        if (options == null) {
          options = {};
        }
        return new MWClassShowItemList(this.root, items, options);
      };

      MWClassShow.prototype.MWClassShowItemList = MWClassShowItemList = (function(_super1) {
        __extends(MWClassShowItemList, _super1);

        MWClassShowItemList.prototype._items = null;

        function MWClassShowItemList(root, items, options) {
          var _ref;
          options['font-size'] = (_ref = options['font-size']) != null ? _ref : 12;
          MWClassShowItemList.__super__.constructor.call(this, root, '', options);
          this.set(items);
        }

        MWClassShowItemList.prototype.set = function(items) {
          this._items = items;
          return this.render();
        };

        MWClassShowItemList.prototype.add = function(key, content) {
          this._items[key] = content;
          return this.render();
        };

        MWClassShowItemList.prototype.remove = function(key) {
          delete this._items[key];
          return this.render();
        };

        MWClassShowItemList.prototype.render = function() {
          var content, key, t, val;
          content = (function() {
            var _ref, _results;
            _ref = this._items;
            _results = [];
            for (key in _ref) {
              val = _ref[key];
              _results.push(val);
            }
            return _results;
          }).call(this);
          t = this.attr('t');
          this.attr('text', content.join("\n"));
          return this.attr('t', t);
        };

        return MWClassShowItemList;

      })(MWClassShowText);

      MWClassShow.prototype.Path = function(path, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowPath(this.root, path, options);
      };

      MWClassShow.prototype.MWClassShowPath = MWClassShowPath = (function(_super1) {
        __extends(MWClassShowPath, _super1);

        MWClassShowPath.prototype._param = null;

        function MWClassShowPath(root, path, options) {
          var bAuto, bHeightAuto, bWidthAuto, _ref, _ref1, _ref2;
          this.root = root;
          options.width = (_ref = options.width) != null ? _ref : 100;
          options.height = (_ref1 = options.height) != null ? _ref1 : 100;
          options['stroke-width'] = (_ref2 = options['stroke-width']) != null ? _ref2 : 0;
          bWidthAuto = options.width === 'auto';
          bHeightAuto = options.height === 'auto';
          bAuto = bWidthAuto || bHeightAuto;
          if (bWidthAuto) {
            if (!bHeightAuto) {
              options.width = options.height;
            } else {
              options.width = 100;
              options.height = 100;
            }
          } else if (bHeightAuto) {
            options.height = options.width;
          }
          this._param = {
            path: path,
            width: options.width,
            height: options.height,
            l: (root.width() - options.width) / 2,
            t: (root.height() - options.height) / 2,
            orientation: 0
          };
          this.element = root.paper.path(this.constructPath(null, false));
          options = remove(options, ['width', 'height']);
          MWClassShowPath.__super__.constructor.call(this, root, options, false);
          if (bAuto) {
            this.attr('width', 'auto');
          }
        }

        MWClassShowPath.prototype._bottomRightCorner = function() {
          var p;
          p = [this._param.width / 2, this._param.height / 2];
          return rotate(p, this._param.orientation);
        };

        MWClassShowPath.prototype._topRightCorner = function() {
          var p;
          p = [this._param.width / 2, -this._param.height / 2];
          return rotate(p, this._param.orientation);
        };

        MWClassShowPath.prototype._maxExtent = function(idx) {
          return 2 * Math.max(Math.abs(this._bottomRightCorner()[idx]), Math.abs(this._topRightCorner()[idx]));
        };

        MWClassShowPath.prototype.rotatedWidth = function() {
          return this._maxExtent(0);
        };

        MWClassShowPath.prototype.rotatedHeight = function() {
          return this._maxExtent(1);
        };

        MWClassShowPath.prototype.attr = function(name, value) {
          var p, ret;
          switch (name) {
            case "path":
            case "width":
            case "height":
            case "l":
            case "t":
            case "orientation":
              if (value != null) {
                if (value === 'auto') {
                  MWClassShowPath.__super__.attr.call(this, name, value);
                } else {
                  p = {};
                  p[name] = value;
                  if (name === 'width') {
                    p.l = this._param.l + (this._param.width - value) / 2;
                  } else if (name === 'height') {
                    p.t = this._param.t + (this._param.height - value) / 2;
                  }
                  this.constructPath(p);
                }
              } else {
                ret = this._param[name];
              }
              break;
            default:
              ret = MWClassShowPath.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowPath.prototype.rotate = function(a, xc, yc) {
          var r, theta, xDiff, yDiff;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          if ((xc != null) || (yc != null)) {
            xc = xc != null ? xc : this.attr("x");
            yc = yc != null ? yc : this.attr("y");
            xDiff = (this.attr("x")) - xc;
            yDiff = (this.attr("y")) - yc;
            r = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
            theta = Math.atan2(yDiff, xDiff);
            theta += a * Math.PI / 180;
            this.attr("x", r * Math.cos(theta) + xc);
            this.attr("y", r * Math.sin(theta) + yc);
          }
          return this.attr("orientation", this.attr("orientation") + a);
        };

        MWClassShowPath.prototype.constructPath = function(param, setPath) {
          var a, f, idx, offset, op, origin, p, path, s, v, _i, _j, _len, _ref, _ref1;
          if (param == null) {
            param = {};
          }
          if (setPath == null) {
            setPath = true;
          }
          for (p in param) {
            v = param[p];
            this._param[p] = v;
          }
          s = [this._param.width, this._param.height];
          offset = [this._param.l, this._param.t];
          a = this._param.orientation;
          origin = add(mult(rotate([0, 0], a, [0.5, 0.5]), s), offset);
          path = "M" + origin;
          _ref = this._param.path;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            op = _ref[_i];
            path += op[0];
            if (op.length > 1) {
              for (idx = _j = 1, _ref1 = op.length - 1; _j <= _ref1; idx = _j += 2) {
                f = rotate(op.slice(idx, +(idx + 1) + 1 || 9e9), a, [0.5, 0.5]);
                p = add(mult(f, s), offset);
                path += p + ",";
              }
            }
          }
          if (setPath) {
            return this.element.attr("path", path);
          } else {
            return path;
          }
        };

        return MWClassShowPath;

      })(MWClassShowStimulus);

      MWClassShow.prototype.X = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowX(this.root, options);
      };

      MWClassShow.prototype.MWClassShowX = MWClassShowX = (function(_super1) {
        __extends(MWClassShowX, _super1);

        function MWClassShowX(root, options) {
          var path, _ref, _ref1, _ref2;
          options.width = (_ref = options.width) != null ? _ref : 16;
          options.height = (_ref1 = options.height) != null ? _ref1 : 16;
          options['stroke-width'] = (_ref2 = options['stroke-width']) != null ? _ref2 : 4;
          path = [['M', 0, 0], ['L', 1, 1], ['M', 0, 1], ['L', 1, 0]];
          MWClassShowX.__super__.constructor.call(this, root, path, options);
        }

        return MWClassShowX;

      })(MWClassShowPath);

      MWClassShow.prototype.Image = function(src, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowImage(this.root, src, options);
      };

      MWClassShow.prototype.MWClassShowImage = MWClassShowImage = (function(_super1) {
        __extends(MWClassShowImage, _super1);

        function MWClassShowImage(root, src, options) {
          var bAutoSize, h, l, t, w;
          this.root = root;
          this.base = root.base;
          bAutoSize = src in this.base.im;
          options = this.parseOptions(options, {
            width: bAutoSize ? this.base.im[src].width : this._defaults.width,
            height: bAutoSize ? this.base.im[src].height : this._defaults.height
          });
          l = this.x2l(options.x, options.width);
          t = this.y2t(options.y, options.height);
          w = options.width;
          h = options.height;
          this.element = root.paper.image(src, l, t, w, h);
          options = remove(options, ['x', 'y', 'width', 'height']);
          MWClassShowImage.__super__.constructor.call(this, root, options, false);
        }

        MWClassShowImage.prototype.attr = function(name, value) {
          switch (name) {
            case "color":
              return null;
            default:
              return MWClassShowImage.__super__.attr.call(this, name, value);
          }
        };

        return MWClassShowImage;

      })(MWClassShowStimulus);

      MWClassShow.prototype.ColorMask = function(src, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowColorMask(this.root, src, options);
      };

      MWClassShow.prototype.MWClassShowColorMask = MWClassShowColorMask = (function(_super1) {
        __extends(MWClassShowColorMask, _super1);

        MWClassShowColorMask.prototype._im = null;

        function MWClassShowColorMask(root, src, options) {
          var bAutoSize;
          this.root = root;
          bAutoSize = src in root.im;
          options = this.parseOptions(options, {
            width: bAutoSize ? root.im[src].width : this._defaults.width,
            height: bAutoSize ? root.im[src].height : this._defaults.height
          });
          if (options.color !== "none") {
            options.background = options.color;
          }
          options = remove(options, ['color']);
          this._im = root.show.Image(src);
          MWClassShowColorMask.__super__.constructor.call(this, root, [this._im], options);
        }

        MWClassShowColorMask.prototype.attr = function(name, value) {
          var ret;
          switch (name) {
            case "color":
              if (this._background != null) {
                ret = this._background.attr(name, value);
              }
              break;
            default:
              ret = MWClassShowColorMask.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        return MWClassShowColorMask;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.ConstructPart = function(i, position, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowConstructPart(this.root, i, position, options);
      };

      MWClassShow.prototype.MWClassShowConstructPart = MWClassShowConstructPart = (function(_super1) {
        __extends(MWClassShowConstructPart, _super1);

        MWClassShowConstructPart._idx = null;

        MWClassShowConstructPart._position = null;

        function MWClassShowConstructPart(root, i, position, options) {
          var src;
          this.root = root;
          this.base = root.base;
          this._idx = i;
          this._position = position;
          src = this.root.game.construct.srcPart(this._idx, this._position);
          MWClassShowConstructPart.__super__.constructor.call(this, this.root, src, options);
        }

        MWClassShowConstructPart.prototype.idx = function() {
          return this._idx;
        };

        return MWClassShowConstructPart;

      })(MWClassShowColorMask);

      MWClassShow.prototype.ConstructFigure = function(parts, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowConstructFigure(this.root, parts, options);
      };

      MWClassShow.prototype.MWClassShowConstructFigure = MWClassShowConstructFigure = (function(_super1) {
        __extends(MWClassShowConstructFigure, _super1);

        MWClassShowConstructFigure._rot = 0;

        MWClassShowConstructFigure._idx = null;

        MWClassShowConstructFigure._d = 0;

        function MWClassShowConstructFigure(root, parts, options) {
          var elements, hPart, i, ohPart, opt, optionsPart, owPart, src, wPart, xFigure, xPart, xl, xr, yFigure, yPart, yb, yt, _i, _ref, _ref1;
          this.root = root;
          this.base = root.base;
          if (Array.isArray(parts)) {
            this._idx = parts;
            this._d = mean(this._idx) / this.root.game.construct.nPart;
          } else if (parts >= 0 && parts <= 1) {
            this._idx = this.root.game.construct.pick(4, parts);
            this._d = parts;
          } else {
            throw "Invalid parts";
          }
          options = this.parseOptions(options, {
            width: 200,
            height: 200,
            color: 'black'
          });
          wPart = options.width / 2;
          hPart = options.height / 2;
          owPart = wPart / 2;
          ohPart = hPart / 2;
          xFigure = (_ref = options.x) != null ? _ref : this.l2x(options.l, options.width);
          yFigure = (_ref1 = options.y) != null ? _ref1 : this.t2y(options.t, options.height);
          xl = xFigure - owPart;
          xr = xFigure + owPart;
          yt = yFigure - ohPart;
          yb = yFigure + ohPart;
          xPart = [xr, xr, xl, xl];
          yPart = [yt, yb, yb, yt];
          optionsPart = {
            width: wPart,
            height: hPart
          };
          elements = [];
          for (i = _i = 0; _i <= 3; i = ++_i) {
            opt = merge(optionsPart, {
              x: xPart[i],
              y: yPart[i],
              color: "none"
            });
            src = this.root.game.construct.srcPart(this._idx[i], i);
            elements.push(root.show.Image(src, opt));
          }
          if (options.color !== "none") {
            options.background = options.color;
          }
          options = remove(options, ['x', 'y', 'width', 'height', 'color']);
          MWClassShowConstructFigure.__super__.constructor.call(this, root, elements, options, false);
        }

        MWClassShowConstructFigure.prototype.attr = function(name, value) {
          var ret;
          switch (name) {
            case "color":
              if (this._background != null) {
                ret = this._background.attr(name, value);
              }
              break;
            default:
              ret = MWClassShowConstructFigure.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowConstructFigure.prototype.idx = function() {
          return this._idx;
        };

        MWClassShowConstructFigure.prototype.createDistractors = function(n, options) {
          var distractors, idx, o, parts, replace, _i, _j, _ref, _ref1, _results, _results1;
          if (options == null) {
            options = {};
          }
          distractors = (function() {
            var _i, _results;
            _results = [];
            for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
              _results.push(null);
            }
            return _results;
          })();
          replace = (function() {
            _results = [];
            for (var _i = 0, _ref = this._idx.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
          randomize(replace);
          _results1 = [];
          for (idx = _j = 0, _ref1 = n - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; idx = 0 <= _ref1 ? ++_j : --_j) {
            o = merge(options, {
              width: this.attr("width"),
              height: this.attr("height"),
              color: this.attr("color")
            });
            parts = copyarray(this._idx);
            parts[replace[idx]] = this.root.game.construct.pickOne(this._d, parts[replace[idx]]);
            _results1.push(distractors[idx] = this.root.show.ConstructFigure(parts, o));
          }
          return _results1;
        };

        return MWClassShowConstructFigure;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.ConstructPrompt = function(figure, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowConstructPrompt(this.root, figure, options);
      };

      MWClassShow.prototype.MWClassShowConstructPrompt = MWClassShowConstructPrompt = (function(_super1) {
        __extends(MWClassShowConstructPrompt, _super1);

        MWClassShowConstructPrompt.prototype._idx = null;

        function MWClassShowConstructPrompt(root, figure, options) {
          var cp, h, idx, nPart, part, w, x, xPad, xPrompt, xStart, yPrompt, _i, _len, _ref, _ref1, _ref2;
          this._idx = figure._idx;
          nPart = this._idx.length;
          w = figure.attr("width") / 2;
          h = figure.attr("height") / 2;
          xPad = w / 2;
          options = this.parseOptions(options, {
            color: figure.attr("color"),
            width: nPart * w + (nPart - 1) * xPad,
            height: h
          });
          xPrompt = (_ref = options.x) != null ? _ref : this.l2x(options.l, options.width);
          yPrompt = (_ref1 = options.y) != null ? _ref1 : this.t2y(options.t, options.height);
          xStart = xPrompt - nPart / 2 * w - Math.floor(nPart / 2) * xPad;
          cp = (function() {
            var _i, _results;
            _results = [];
            for (_i = 1; 1 <= nPart ? _i <= nPart : _i >= nPart; 1 <= nPart ? _i++ : _i--) {
              _results.push(0);
            }
            return _results;
          })();
          _ref2 = this._idx;
          for (idx = _i = 0, _len = _ref2.length; _i < _len; idx = ++_i) {
            part = _ref2[idx];
            x = xStart + (w + xPad) * idx + w / 2;
            cp[idx] = root.show.ConstructPart(part, idx, {
              width: w,
              height: h,
              x: x,
              y: yPrompt
            });
          }
          MWClassShowConstructPrompt.__super__.constructor.call(this, root, cp, options);
        }

        return MWClassShowConstructPrompt;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.AssemblagePart = function(part, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowAssemblagePart(this.root, part, options);
      };

      MWClassShow.prototype.MWClassShowAssemblagePart = MWClassShowAssemblagePart = (function(_super1) {
        var _assemblage;

        __extends(MWClassShowAssemblagePart, _super1);

        MWClassShowAssemblagePart.prototype._param = null;

        _assemblage = null;

        MWClassShowAssemblagePart.prototype.part = null;

        function MWClassShowAssemblagePart(root, part, options) {
          var _ref, _ref1;
          this.root = root;
          this.base = root.base;
          options.size = (_ref = options.size) != null ? _ref : 100;
          options.thickness = (_ref1 = options.thickness) != null ? _ref1 : 10;
          this.part = part;
          this._param = merge(this.root.game.assemblage.param(this.part), {
            index: null,
            width: options.size,
            height: options.size,
            l: 0,
            t: 0,
            orientation: 0,
            grid: [0, 0],
            parent: null,
            attachment: [null, null, null, null]
          });
          this.element = root.paper.path(this.constructPath(this._param, false));
          MWClassShowAssemblagePart.__super__.constructor.call(this, root, options);
          this.attr("stroke-linecap", "round");
          this.attr("stroke-linejoin", "round");
          this.attr("fill", root.background);
        }

        MWClassShowAssemblagePart.prototype.attr = function(name, value) {
          var p, ret;
          switch (name) {
            case "l":
            case "t":
            case "width":
            case "height":
            case "orientation":
              if (value != null) {
                if (value === 'auto') {
                  MWClassShowAssemblagePart.__super__.attr.call(this, name, value);
                } else {
                  p = {};
                  p[name] = value;
                  this.constructPath(p);
                }
              } else {
                ret = this._param[name];
              }
              break;
            case "color":
              ret = MWClassShowAssemblagePart.__super__.attr.call(this, "stroke", value);
              break;
            case "thickness":
              ret = MWClassShowAssemblagePart.__super__.attr.call(this, "stroke-width", value);
              break;
            default:
              ret = MWClassShowAssemblagePart.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowAssemblagePart.prototype.rotate = function(a, xc, yc) {
          var r, steps, theta, xDiff, yDiff;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          if ((a % 90) !== 0) {
            throw "Invalid rotation.";
          }
          steps = a / 90;
          if ((xc != null) || (yc != null)) {
            xc = xc != null ? xc : this.attr("x");
            yc = yc != null ? yc : this.attr("y");
            xDiff = (this.attr("x")) - xc;
            yDiff = (this.attr("y")) - yc;
            r = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));
            theta = Math.atan2(yDiff, xDiff);
            theta += a * Math.PI / 180;
            this.attr("x", r * Math.cos(theta) + xc);
            this.attr("y", r * Math.sin(theta) + yc);
          }
          return this.attr("orientation", mod(this.attr("orientation") + steps, 4));
        };

        MWClassShowAssemblagePart.prototype.scale = function(s, xc, yc) {
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          this.attr("thickness", this.attr("thickness") * s);
          return MWClassShowAssemblagePart.__super__.scale.call(this, s, xc, yc);
        };

        MWClassShowAssemblagePart.prototype.constructPath = function(param, setPath) {
          var a, f, idx, offset, op, origin, p, path, s, v, _i, _j, _len, _ref, _ref1;
          if (param == null) {
            param = {};
          }
          if (setPath == null) {
            setPath = true;
          }
          for (p in param) {
            v = param[p];
            this._param[p] = v;
          }
          s = [this._param.width, this._param.height];
          offset = [this._param.l, this._param.t];
          a = 90 * this._param.orientation;
          origin = add(mult(rotate([0, 0], a, [0.5, 0.5]), s), offset);
          path = "M" + origin;
          _ref = this._param.definition;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            op = _ref[_i];
            path += op[0];
            if (op.length > 1) {
              for (idx = _j = 1, _ref1 = op.length - 1; _j <= _ref1; idx = _j += 2) {
                f = rotate(op.slice(idx, +(idx + 1) + 1 || 9e9), a, [0.5, 0.5]);
                p = add(mult(f, s), offset);
                path += p + ",";
              }
            }
          }
          if (setPath) {
            return this.attr("path", path);
          } else {
            return path;
          }
        };

        MWClassShowAssemblagePart.prototype.side2direction = function(side) {
          var sideAbs;
          sideAbs = mod(side + this._param.orientation, 4);
          switch (sideAbs) {
            case 0:
              return [-1, 0];
            case 1:
              return [0, -1];
            case 2:
              return [1, 0];
            case 3:
              return [0, 1];
            default:
              throw 'WTF?';
          }
        };

        MWClassShowAssemblagePart.prototype.naturalLocation = function(excludePart, excludeNeighbor) {
          var ext, extra, extraLength, g, gridMe, gridOther, gridOx, gridOy, h, hAbs, i, iMe, iOther, iPart, idx, length, loc, mnLength, mnX, mnY, mxX, mxY, nOther, nPart, nbr, neighbors, possibleExtra, sep, v, vAbs, _i, _len;
          if (excludePart == null) {
            excludePart = null;
          }
          if (excludeNeighbor == null) {
            excludeNeighbor = null;
          }
          if (excludePart != null) {
            excludePart = this._assemblage.part(excludePart)._param.idx;
          }
          if (excludeNeighbor != null) {
            excludeNeighbor = this._assemblage.part(excludeNeighbor)._param.idx;
          }
          loc = "";
          sep = " ";
          extra = "";
          nPart = this._assemblage.partCount(this.part, excludePart);
          if (nPart === 1) {
            sep = "";
          } else {
            iPart = this._assemblage.findPart(this.part, excludePart);
            iMe = this._param.idx;
            iOther = setdiff(iPart, iMe);
            nOther = iOther.length;
            gridMe = this._param.grid;
            gridOther = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = iOther.length; _i < _len; _i++) {
                idx = iOther[_i];
                _results.push(this._assemblage.part(idx)._param.grid);
              }
              return _results;
            }).call(this);
            gridOx = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = gridOther.length; _i < _len; _i++) {
                g = gridOther[_i];
                _results.push(g[0]);
              }
              return _results;
            })();
            gridOy = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = gridOther.length; _i < _len; _i++) {
                g = gridOther[_i];
                _results.push(g[1]);
              }
              return _results;
            })();
            mnX = Math.min.apply(Math, gridOx);
            mxX = Math.max.apply(Math, gridOx);
            mnY = Math.min.apply(Math, gridOy);
            mxY = Math.max.apply(Math, gridOy);
            hAbs = null;
            if (gridMe[0] === mnX && gridMe[0] === mxX) {
              h = null;
            } else if (gridMe[0] <= mnX) {
              h = "left";
              hAbs = gridMe[0] !== mnX ? h : void 0;
            } else if (gridMe[0] >= mxX) {
              h = "right";
              hAbs = gridMe[0] !== mxX ? h : void 0;
            } else {
              h = null;
            }
            vAbs = null;
            if (gridMe[1] === mnY && gridMe[1] === mxY) {
              v = null;
            } else if (gridMe[1] <= mnY) {
              v = "top";
              vAbs = gridMe[1] !== mnY ? v : void 0;
            } else if (gridMe[1] >= mxY) {
              v = "bottom";
              vAbs = gridMe[1] !== mxY ? v : void 0;
            } else {
              v = null;
            }
            if ((h != null) && (v != null)) {
              loc = "" + v + "-" + h;
            } else if (hAbs != null) {
              loc = hAbs;
            } else if (vAbs != null) {
              loc = vAbs;
            } else if (nOther === 2) {
              loc = "middle";
            } else {
              sep = "";
              neighbors = (function() {
                var _i, _len, _ref, _results;
                _ref = this._param.attachment;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  nbr = _ref[_i];
                  if ((nbr != null) && excludePart !== nbr && excludeNeighbor !== nbr) {
                    _results.push(nbr);
                  }
                }
                return _results;
              }).call(this);
              if (neighbors.length === 0) {
                return null;
              }
              possibleExtra = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
                  nbr = neighbors[_i];
                  _results.push(this.naturalRelativeLocation(nbr, true, excludePart));
                }
                return _results;
              }).call(this);
              possibleExtra = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = possibleExtra.length; _i < _len; _i++) {
                  ext = possibleExtra[_i];
                  if (ext != null) {
                    _results.push(ext);
                  }
                }
                return _results;
              })();
              extraLength = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = possibleExtra.length; _i < _len; _i++) {
                  ext = possibleExtra[_i];
                  _results.push(ext.length);
                }
                return _results;
              })();
              mnLength = Math.min.apply(Math, extraLength);
              for (i = _i = 0, _len = extraLength.length; _i < _len; i = ++_i) {
                length = extraLength[i];
                if (length === mnLength) {
                  extra = possibleExtra[i];
                  break;
                }
              }
              extra = " " + extra;
            }
          }
          return "" + loc + sep + this.part + extra;
        };

        MWClassShowAssemblagePart.prototype.naturalRelativeLocation = function(neighbor, includeNeighbor, excludePart) {
          var loc, neighborLoc, p1, p2;
          if (includeNeighbor == null) {
            includeNeighbor = false;
          }
          if (excludePart == null) {
            excludePart = null;
          }
          neighbor = this._assemblage.part(neighbor);
          p1 = this._param.grid;
          p2 = neighbor._param.grid;
          if (p1[0] < p2[0]) {
            loc = "to the left of";
          } else if (p1[0] > p2[0]) {
            loc = "to the right of";
          } else if (p1[1] < p2[1]) {
            loc = "above";
          } else if (p1[1] > p2[1]) {
            loc = "below";
          } else {
            loc = "on top of";
          }
          if (includeNeighbor) {
            neighborLoc = neighbor.naturalLocation(excludePart, this._param.idx);
            if (neighborLoc != null) {
              return "" + loc + " the " + neighborLoc;
            } else {
              return null;
            }
          } else {
            return loc;
          }
        };

        MWClassShowAssemblagePart.prototype.naturalOrientation = function() {
          return naturalDirection(90 * this._param.orientation, this._param.symmetry);
        };

        MWClassShowAssemblagePart.prototype.naturalName = function(fullName) {
          var orientation;
          if (fullName == null) {
            fullName = false;
          }
          orientation = fullName ? this.naturalOrientation() : "";
          if (orientation.length) {
            orientation = "" + orientation + " ";
          }
          return "" + orientation + this.part;
        };

        MWClassShowAssemblagePart.prototype.naturalDefinition = function() {
          var parent, partLocation, partName;
          parent = this._param.parent != null ? this._assemblage.part(this._param.parent) : null;
          partName = this.naturalName(true);
          partLocation = parent != null ? " " + (this.naturalRelativeLocation(parent, true, this)) : "";
          return "" + partName + partLocation;
        };

        return MWClassShowAssemblagePart;

      })(MWClassShowStimulus);

      MWClassShow.prototype.Assemblage = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowAssemblage(this.root, options);
      };

      MWClassShow.prototype.MWClassShowAssemblage = MWClassShowAssemblage = (function(_super1) {
        __extends(MWClassShowAssemblage, _super1);

        MWClassShowAssemblage.prototype._options = null;

        MWClassShowAssemblage.prototype._history = null;

        MWClassShowAssemblage.prototype._instruction = null;

        MWClassShowAssemblage.prototype._gridExtent = null;

        MWClassShowAssemblage.prototype.existingParts = null;

        MWClassShowAssemblage.prototype.possibleParts = null;

        MWClassShowAssemblage.prototype.correct = true;

        function MWClassShowAssemblage(root, options) {
          var parts, _ref, _ref1, _ref2, _ref3, _ref4;
          this.root = root;
          this.base = root.base;
          parts = this.root.game.assemblage.parts();
          options.x = (_ref = options.x) != null ? _ref : 0;
          options.y = (_ref1 = options.y) != null ? _ref1 : 0;
          options.imax = (_ref2 = options.imax) != null ? _ref2 : parts.length - 1;
          options.background = (_ref3 = options.background) != null ? _ref3 : true;
          options.correct = (_ref4 = options.correct) != null ? _ref4 : true;
          this.existingParts = [];
          this.possibleParts = parts.slice(0, +options.imax + 1 || 9e9);
          this._options = options;
          this._history = [];
          this._instruction = [];
          this._grid = {
            min: [0, 0],
            max: [0, 0]
          };
          this.correct = options.correct;
          MWClassShowAssemblage.__super__.constructor.call(this, root, [], options);
        }

        MWClassShowAssemblage.prototype.attr = function(name, value) {
          var part, ret, wNew, wOld, _i, _len, _ref, _results;
          switch (name) {
            case "thickness":
              if (value != null) {
                return MWClassShowAssemblage.__super__.attr.call(this, name, value);
              } else {
                if (this.numParts() > 0) {
                  return this.part(0).attr(name);
                } else {
                  return null;
                }
              }
              break;
            case "box":
              if (value != null) {
                wOld = this.attr("width");
                ret = MWClassShowAssemblage.__super__.attr.call(this, name, value);
                wNew = this.attr("width");
                this.attr("thickness", this.attr("thickness") * wNew / wOld);
                return ret;
              } else {
                return MWClassShowAssemblage.__super__.attr.call(this, name, value);
              }
              break;
            case "color":
              if (value != null) {
                _ref = this.part();
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  part = _ref[_i];
                  _results.push(part.attr("color", value));
                }
                return _results;
              } else {
                return MWClassShowAssemblage.__super__.attr.call(this, name);
              }
              break;
            default:
              return MWClassShowAssemblage.__super__.attr.call(this, name, value);
          }
        };

        MWClassShowAssemblage.prototype.rotate = function(steps, xc, yc) {
          var a, el, gridX, gridY, i, _i, _len, _ref;
          if (xc == null) {
            xc = null;
          }
          if (yc == null) {
            yc = null;
          }
          a = 90 * steps;
          MWClassShowAssemblage.__super__.rotate.call(this, a, xc, yc);
          _ref = this.part();
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            el = _ref[i];
            el._param.grid = around(rotate(el._param.grid, a));
          }
          gridX = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = this.part();
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              el = _ref1[_j];
              _results.push(el._param.grid[0]);
            }
            return _results;
          }).call(this);
          gridY = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = this.part();
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              el = _ref1[_j];
              _results.push(el._param.grid[1]);
            }
            return _results;
          }).call(this);
          this._grid.min[0] = Math.min.apply(Math, gridH);
          this._grid.min[1] = Math.min.apply(Math, gridV);
          this._grid.max[0] = Math.max.apply(Math, gridH);
          this._grid.max[1] = Math.max.apply(Math, gridV);
          return this.addEvent('rotate', a);
        };

        MWClassShowAssemblage.prototype.numParts = function() {
          return this.element.length;
        };

        MWClassShowAssemblage.prototype.numSteps = function() {
          return this._history.length;
        };

        MWClassShowAssemblage.prototype.part = function(part) {
          if (part == null) {
            part = null;
          }
          if (part instanceof MWClassShowStimulus) {
            return part;
          } else if (part != null) {
            return this.element[this.partElementIndex(part)];
          } else if (this.numParts() > 0) {
            return this.element.slice(this.partElementIndex(0));
          } else {
            return [];
          }
        };

        MWClassShowAssemblage.prototype.partElementIndex = function(part) {
          if (part instanceof MWClassShowStimulus) {
            return this.partElementIndex(part._param.idx);
          } else {
            return part;
          }
        };

        MWClassShowAssemblage.prototype.addEvent = function(eventType, info) {
          var action, el, instruct, thing;
          this._history.push([eventType, info]);
          switch (eventType) {
            case "add":
              el = this.part(info);
              action = el._param.parent != null ? "Add" : "Imagine";
              thing = el.naturalDefinition();
              instruct = "" + action + " " + (aan(thing)) + " " + thing;
              break;
            case "remove":
              el = this.part(info);
              instruct = "Remove the " + (el.naturalLocation());
              break;
            case "rotate":
              instruct = "Rotate " + (naturalAngle(info));
              break;
            default:
              throw 'Invalid event type';
          }
          return this._instruction.push(instruct);
        };

        MWClassShowAssemblage.prototype.removePart = function(part) {
          var conn, idx, neighbor, _i, _len, _ref;
          part = this.part(part);
          idx = part._param.idx;
          _ref = part._param.attachment;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            neighbor = _ref[_i];
            if (neighbor != null) {
              neighbor = this.part(neighbor);
              conn = find(neighbor._param.attachment, idx)[0];
              neighbor._param.attachment[conn] = null;
              if (neighbor._param.parent === idx) {
                neighbor._param.parent = null;
              }
            }
          }
          this.addEvent('remove', idx);
          return this.removeElement(this.partElementIndex(idx));
        };

        MWClassShowAssemblage.prototype.addPart = function(partName, neighbor, sidePart, sideNeighbor, options) {
          var gridRel, hN, hP, orientation, part, r, wN, wP, x, xCur, xN, y, yCur, yN, _ref;
          if (neighbor == null) {
            neighbor = null;
          }
          if (sidePart == null) {
            sidePart = 0;
          }
          if (sideNeighbor == null) {
            sideNeighbor = 0;
          }
          if (options == null) {
            options = {};
          }
          options = merge(this._options, options);
          xCur = this.attr("x");
          yCur = this.attr("y");
          part = this.root.show.AssemblagePart(partName, options);
          part._assemblage = this;
          this.addElement(part);
          part._param.idx = this.numParts() - 1;
          if (find(this.existingParts, partName).length === 0) {
            this.existingParts.push(partName);
          }
          if (neighbor != null) {
            neighbor = this.part(neighbor);
            part._param.parent = neighbor._param.idx;
            neighbor._param.attachment[sideNeighbor] = part._param.idx;
            part._param.attachment[sidePart] = neighbor._param.idx;
            orientation = mod(mod(sideNeighbor + 2, 4) - sidePart + neighbor._param.orientation, 4);
            gridRel = neighbor.side2direction(sideNeighbor);
            wP = part.attr("width");
            hP = part.attr("height");
            xN = neighbor.attr("x");
            yN = neighbor.attr("y");
            wN = neighbor.attr("width");
            hN = neighbor.attr("height");
            r = sideNeighbor === 0 || sideNeighbor === 2 ? (wN + wP) / 2 : (hN + hP) / 2;
            x = xN + r * gridRel[0];
            y = yN + r * gridRel[1];
            part._param.grid = add(neighbor._param.grid, gridRel);
            this._grid.min[0] = Math.min(this._grid.min[0], part._param.grid[0]);
            this._grid.max[0] = Math.max(this._grid.max[0], part._param.grid[0]);
            this._grid.min[1] = Math.min(this._grid.min[1], part._param.grid[1]);
            this._grid.max[1] = Math.max(this._grid.max[1], part._param.grid[1]);
          } else {
            orientation = (_ref = options.orientation) != null ? _ref : 0;
            x = this.attr("x");
            y = this.attr("y");
          }
          part.attr("x", x);
          part.attr("y", y);
          part.attr("orientation", orientation);
          part.scale(this._scale);
          this.attr("x", xCur);
          this.attr("y", yCur);
          this.addEvent('add', part._param.idx);
          return part;
        };

        MWClassShowAssemblage.prototype.addSet = function(setParam) {
          var param, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = setParam.length; _i < _len; _i++) {
            param = setParam[_i];
            _results.push(this.addPart.apply(this, param));
          }
          return _results;
        };

        MWClassShowAssemblage.prototype.getSet = function() {
          var i, parent, part, partName, setParam, sideParent, sidePart, _i, _len, _ref;
          setParam = (function() {
            var _i, _ref, _results;
            _results = [];
            for (_i = 1, _ref = this.numParts(); 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
              _results.push([]);
            }
            return _results;
          }).call(this);
          _ref = this.part();
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            part = _ref[i];
            partName = part.part;
            parent = part._param.parent;
            if (parent != null) {
              sidePart = find(part._param.attachment, parent)[0];
              sideParent = find(this.part(parent)._param.attachment, part._param.idx)[0];
            } else {
              sidePart = sideParent = null;
            }
            setParam[i] = [partName, parent, sidePart, sideParent];
          }
          return setParam;
        };

        MWClassShowAssemblage.prototype.addRandom = function() {
          var appendage, options;
          appendage = this.pickAppendage();
          options = !this.numParts() > 0 ? {} : {
            orientation: randomInt(0, 3)
          };
          if (appendage != null) {
            return this.addPart.apply(this, __slice.call(appendage).concat([options]));
          } else {
            return null;
          }
        };

        MWClassShowAssemblage.prototype.naturalName = function() {
          if (this.numParts() === 1) {
            return this.part(0).naturalName();
          } else {
            return "image";
          }
        };

        MWClassShowAssemblage.prototype.getUniqueParts = function() {
          var part;
          return unique((function() {
            var _i, _len, _ref, _results;
            _ref = this.part();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              part = _ref[_i];
              _results.push(part.part);
            }
            return _results;
          }).call(this));
        };

        MWClassShowAssemblage.prototype.getOccupiedPositions = function(excludePart) {
          var part, _i, _len, _ref, _results;
          if (excludePart == null) {
            excludePart = null;
          }
          if (excludePart != null) {
            excludePart = this.part(excludePart);
          }
          _ref = this.part();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            part = _ref[_i];
            if (part !== excludePart) {
              _results.push(part._param.grid);
            }
          }
          return _results;
        };

        MWClassShowAssemblage.prototype.getAllParts = function(excludePart) {
          var part, _i, _len, _ref, _results;
          if (excludePart == null) {
            excludePart = null;
          }
          if (excludePart != null) {
            excludePart = this.part(excludePart);
          }
          _ref = this.part();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            part = _ref[_i];
            if (part !== excludePart) {
              _results.push(part.part);
            }
          }
          return _results;
        };

        MWClassShowAssemblage.prototype.findPart = function(part, excludePart) {
          if (excludePart == null) {
            excludePart = null;
          }
          return find(this.getAllParts(excludePart), part);
        };

        MWClassShowAssemblage.prototype.findOpenConnections = function(excludePart) {
          var conn, grid, i, occupied, part, side, _i, _j, _len, _len1, _ref, _ref1;
          if (excludePart == null) {
            excludePart = null;
          }
          if (this.numParts() === 0) {
            return [[null, 0]];
          } else {
            if (excludePart != null) {
              excludePart = this.part(excludePart);
            }
            occupied = this.getOccupiedPositions();
            conn = [];
            _ref = this.part();
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              part = _ref[i];
              if (part !== excludePart) {
                _ref1 = this.root.game.assemblage.param(part.part).connects;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  side = _ref1[_j];
                  if (part._param.attachment[side] == null) {
                    grid = add(part._param.grid, part.side2direction(side));
                    if (find(occupied, grid).length === 0) {
                      conn.push([i, side]);
                    }
                  }
                }
              }
            }
            return conn;
          }
        };

        MWClassShowAssemblage.prototype.partCount = function(part, excludePart) {
          if (excludePart == null) {
            excludePart = null;
          }
          return this.findPart(part, excludePart).length;
        };

        MWClassShowAssemblage.prototype.pickPart = function() {
          return pickFrom(this.possibleParts);
        };

        MWClassShowAssemblage.prototype.pickSide = function(part) {
          return pickFrom(this.root.game.assemblage.param(part).connects);
        };

        MWClassShowAssemblage.prototype.pickAppendage = function(excludePart) {
          var conn, conns, part, side;
          if (excludePart == null) {
            excludePart = null;
          }
          conns = this.findOpenConnections(excludePart);
          conn = pickFrom(conns);
          if (conn != null) {
            part = conns.length === 1 && (conn[0] != null) ? 'square' : this.pickPart();
            side = this.pickSide(part);
            return [part, conn[0], side, conn[1]];
          } else {
            return null;
          }
        };

        MWClassShowAssemblage.prototype.findReplacementsGivenParts = function(param, parts) {
          var c, conn, goodReplacement, part, replacement, replacementParts, _i, _j, _len, _len1;
          part = param[0];
          conn = this.root.game.assemblage.param(part).connects;
          replacementParts = [];
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            replacement = parts[_i];
            if (part !== replacement) {
              goodReplacement = true;
              for (_j = 0, _len1 = conn.length; _j < _len1; _j++) {
                c = conn[_j];
                if (find(this.root.game.assemblage.param(replacement).connects, c).length === 0) {
                  goodReplacement = false;
                  break;
                }
              }
              if (goodReplacement) {
                replacementParts.push(replacement);
              }
            }
          }
          return replacementParts;
        };

        MWClassShowAssemblage.prototype.findReplacements = function(param) {
          var replacementParts;
          if (this.numParts() > 2) {
            replacementParts = this.findReplacementsGivenParts(param, this.existingParts);
          } else {
            replacementParts = [];
          }
          if (replacementParts.length === 0) {
            replacementParts = this.findReplacementsGivenParts(param, this.possibleParts);
          }
          return replacementParts;
        };

        MWClassShowAssemblage.prototype.pickReplacement = function(param) {
          var paramReplace;
          paramReplace = copyarray(param);
          paramReplace[0] = pickFrom(this.findReplacements(param));
          return paramReplace;
        };

        MWClassShowAssemblage.prototype.createDistractor = function(options) {
          var distractor, idx, nTries, setExclude, setIsGood, setParam, setParamOrig, _i, _len, _ref, _ref1, _ref2, _ref3;
          if (options == null) {
            options = {};
          }
          options.color = (_ref = options.color) != null ? _ref : this.attr("color");
          options.correct = (_ref1 = options.correct) != null ? _ref1 : false;
          options.exclude = (_ref2 = options.exclude) != null ? _ref2 : [];
          setParamOrig = this.getSet();
          nTries = 0;
          while (true) {
            setParam = copyarray(setParamOrig);
            idx = randomInt(0, setParam.length - 1);
            setParam[idx] = this.pickReplacement(setParam[idx]);
            if (options.exclude.length > 0 && nTries < 20) {
              setIsGood = true;
              _ref3 = options.exclude;
              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                setExclude = _ref3[_i];
                if (equals(setParam, setExclude)) {
                  setIsGood = false;
                  nTries++;
                  break;
                }
              }
              if (setIsGood) {
                break;
              }
            } else {
              break;
            }
          }
          distractor = this.root.show.Assemblage(remove(options, ['exclude']));
          distractor.addSet(setParam);
          distractor.rotate(this._rotation / 90);
          return distractor;
        };

        MWClassShowAssemblage.prototype.createDistractors = function(n, options) {
          var d, distractors, distractorsSet, _i;
          if (options == null) {
            options = {};
          }
          distractors = [];
          distractorsSet = [];
          for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
            d = this.createDistractor(merge(options, {
              exclude: distractorsSet
            }));
            distractors.push(d);
            distractorsSet.push(d.getSet());
          }
          return distractors;
        };

        return MWClassShowAssemblage;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.AssemblageInstruction = function(a, step, options) {
        if (step == null) {
          step = null;
        }
        if (options == null) {
          options = {};
        }
        return new MWClassShowAssemblageInstruction(this.root, a, step, options);
      };

      MWClassShow.prototype.MWClassShowAssemblageInstruction = MWClassShowAssemblageInstruction = (function(_super1) {
        __extends(MWClassShowAssemblageInstruction, _super1);

        function MWClassShowAssemblageInstruction(root, a, step, options) {
          var instructions, _ref;
          if (step == null) {
            step = null;
          }
          options.y = (_ref = options.y) != null ? _ref : 0;
          instructions = step != null ? a._instruction[step] : a._instruction.join("\n");
          MWClassShowAssemblageInstruction.__super__.constructor.call(this, root, instructions, options);
        }

        return MWClassShowAssemblageInstruction;

      })(MWClassShowInstructions);

      MWClassShow.prototype.RotateStimulus = function(idx, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowRotateStimulus(this.root, idx, options);
      };

      MWClassShow.prototype.MWClassShowRotateStimulus = MWClassShowRotateStimulus = (function(_super1) {
        __extends(MWClassShowRotateStimulus, _super1);

        MWClassShowRotateStimulus.prototype.precision = 0;

        MWClassShowRotateStimulus.prototype._idx = null;

        MWClassShowRotateStimulus.prototype._path = null;

        MWClassShowRotateStimulus.prototype._initialOrientation = 0;

        MWClassShowRotateStimulus.prototype._distractorOrientation = 0;

        MWClassShowRotateStimulus.prototype.referencePrecision = [90, 60, 45, 30, 20, 15, 10, 8, 6, 5, 4, 3, 2, 1];

        MWClassShowRotateStimulus.prototype.rotatedWidth = function() {
          return this._path.rotatedWidth();
        };

        MWClassShowRotateStimulus.prototype.rotatedHeight = function() {
          return this._path.rotatedHeight();
        };

        function MWClassShowRotateStimulus(root, idx, options) {
          var _ref, _ref1, _ref2, _ref3;
          this.root = root;
          this.base = root.base;
          this._idx = idx;
          this.precision = (_ref = options.precision) != null ? _ref : 30;
          options.orientation = (_ref1 = options.orientation) != null ? _ref1 : randomInt(0, 359);
          options.auto_scale = (_ref2 = options.auto_scale) != null ? _ref2 : 0.5;
          if (options.width == null) {
            if (options.height == null) {
              options.width = 'auto';
            } else {
              options.width = options.height;
            }
          } else if (options.height == null) {
            options.height = options.width;
          }
          this._path = this.root.show.Path(this.root.game.rotate.path[this._idx], options);
          options = remove(options, ['orientation', 'width', 'height']);
          options.background = (_ref3 = options.background) != null ? _ref3 : root.background;
          MWClassShowRotateStimulus.__super__.constructor.call(this, root, [this._path], options);
          this._distractorOrientation = this.generateDistractorOrientation();
          this._initialOrientation = this.generateInitialOrientation();
        }

        MWClassShowRotateStimulus.prototype.attr = function(name, value) {
          var ret;
          switch (name) {
            case "orientation":
              ret = this._path.attr(name, value);
              this.updateBackground(['orientation']);
              break;
            default:
              ret = MWClassShowRotateStimulus.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowRotateStimulus.prototype.updateBackground = function(param) {
          var p, _i, _len, _ref, _results;
          if (this._background != null) {
            _ref = forceArray(param);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              switch (p) {
                case 'orientation':
                case 'width':
                case 'height':
                  this._background.attr("width", this.rotatedWidth());
                  _results.push(this._background.attr("height", this.rotatedHeight()));
                  break;
                default:
                  _results.push(this._background.attr(p, this.attr(p)));
              }
            }
            return _results;
          }
        };

        MWClassShowRotateStimulus.prototype.operation = function() {
          return naturalAngle(this.attr('orientation') - this._initialOrientation, null, true);
        };

        MWClassShowRotateStimulus.prototype.generateDistractorOrientation = function() {
          return this.attr('orientation') + this.precision * (2 * randomInt(0, 1) - 1);
        };

        MWClassShowRotateStimulus.prototype.generateInitialOrientation = function() {
          var nStep, refPrec, steps;
          refPrec = nearest(this.precision, this.referencePrecision);
          nStep = Math.floor(90 / refPrec);
          steps = randomInt(1, nStep) * (2 * randomInt(0, 1) - 1);
          return this.attr('orientation') - steps * refPrec;
        };

        MWClassShowRotateStimulus.prototype.createVariant = function(orientation, options) {
          var variant, _ref, _ref1;
          if (options == null) {
            options = {};
          }
          options.color = (_ref = options.color) != null ? _ref : this.attr("color");
          options.correct = (_ref1 = options.correct) != null ? _ref1 : false;
          options.orientation = orientation;
          return variant = this.root.show.RotateStimulus(this._idx, options);
        };

        MWClassShowRotateStimulus.prototype.createPrompt = function(options) {
          if (options == null) {
            options = {};
          }
          return this.createVariant(this._initialOrientation, options);
        };

        MWClassShowRotateStimulus.prototype.createDistractor = function(options) {
          if (options == null) {
            options = {};
          }
          return this.createVariant(this._distractorOrientation, options);
        };

        MWClassShowRotateStimulus.prototype.createDistractors = function(n, options) {
          var _i, _results;
          if (options == null) {
            options = {};
          }
          _results = [];
          for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
            _results.push(this.createDistractor(options));
          }
          return _results;
        };

        return MWClassShowRotateStimulus;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.Progress = function(info, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowProgress(this.root, info, options);
      };

      MWClassShow.prototype.MWClassShowProgress = MWClassShowProgress = (function(_super1) {
        __extends(MWClassShowProgress, _super1);

        MWClassShowProgress.prototype._steps = 0;

        MWClassShowProgress.prototype._width = 0;

        function MWClassShowProgress(root, info, options) {
          var bit, elements, i, _i, _ref;
          this.root = root;
          options = this.parseOptions(options, {
            width: 300,
            steps: 10,
            color: "red",
            r: 5
          });
          this._steps = options.steps;
          this._width = options.width;
          elements = [root.show.Instructions(info)];
          for (i = _i = 0, _ref = this._steps - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            bit = root.show.Circle({
              r: options.r
            });
            bit.show(false);
            elements.push(bit);
          }
          delete options.r;
          MWClassShowProgress.__super__.constructor.call(this, root, elements, options);
        }

        MWClassShowProgress.prototype.attr = function(name, value) {
          var bottom, colBase, k, ret, top, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
          switch (name) {
            case "steps":
              ret = this._steps;
              break;
            case "width":
              ret = Math.max(this._width, this.element[0].attr("width"));
              break;
            case "height":
              bottom = this.element[this._steps].attr("y") + this.element[this._steps].attr("height");
              top = this.element[0].attr("y") - this.element[0].attr("height") / 2;
              ret = bottom - top;
              break;
            case "x":
              if (value != null) {
                this.element[0].attr(name, value);
                for (k = _i = 1, _ref = this._steps; 1 <= _ref ? _i <= _ref : _i >= _ref; k = 1 <= _ref ? ++_i : --_i) {
                  this.element[k].attr(name, -this._width / 2 + (k - 1) * this._width / (this._steps - 1));
                }
              } else {
                ret = this.element[0].attr(name);
              }
              break;
            case "y":
              if (value != null) {
                this.element[0].attr(name, value - 32);
                for (k = _j = 1, _ref1 = this._steps; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; k = 1 <= _ref1 ? ++_j : --_j) {
                  this.element[k].attr(name, value);
                }
              } else {
                ret = this.element[this._steps].attr(name);
              }
              break;
            case "color":
              if (value != null) {
                colBase = Raphael.color(value);
                for (k = _k = 1, _ref2 = this._steps; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; k = 1 <= _ref2 ? ++_k : --_k) {
                  this.element[k].attr("color", "rgba(" + colBase.r + "," + colBase.g + "," + colBase.b + "," + (k / this._steps) + ")");
                }
              } else {
                ret = this.element[this._steps].attr(name);
              }
              break;
            case "r":
              if (value != null) {
                for (k = _l = 1, _ref3 = this._steps; 1 <= _ref3 ? _l <= _ref3 : _l >= _ref3; k = 1 <= _ref3 ? ++_l : --_l) {
                  this.element[k].attr("r", value);
                }
              } else {
                ret = this.element[this._steps - 1].attr(name);
              }
              break;
            default:
              MWClassShowProgress.__super__.attr.call(this, name, value);
          }
          if (value != null) {
            return this;
          } else {
            return ret;
          }
        };

        MWClassShowProgress.prototype.update = function(f) {
          var k, kLast, _i, _j, _ref, _ref1;
          f = Math.min(1, Math.max(0, f));
          kLast = Math.round(this._steps * f);
          if (kLast > 0) {
            for (k = _i = 1; 1 <= kLast ? _i <= kLast : _i >= kLast; k = 1 <= kLast ? ++_i : --_i) {
              this.element[k].show(true);
            }
          }
          if (kLast < this._steps) {
            for (k = _j = _ref = kLast + 1, _ref1 = this._steps; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; k = _ref <= _ref1 ? ++_j : --_j) {
              this.element[k].show(false);
            }
          }
          if (f >= 1) {
            return this.remove();
          }
        };

        return MWClassShowProgress;

      })(MWClassShowCompoundStimulus);

      MWClassShow.prototype.TrialRecord = function(options) {
        if (options == null) {
          options = {};
        }
        return new MWClassShowTrialRecord(this.root, options);
      };

      MWClassShow.prototype.MWClassShowTrialRecord = MWClassShowTrialRecord = (function(_super1) {
        __extends(MWClassShowTrialRecord, _super1);

        MWClassShowTrialRecord.prototype.colCorrect = null;

        MWClassShowTrialRecord.prototype.colWrong = null;

        function MWClassShowTrialRecord(root, options) {
          var _ref, _ref1;
          this.colCorrect = (_ref = options.col_correct) != null ? _ref : 'lime';
          this.colWrong = (_ref1 = options.col_wrong) != null ? _ref1 : 'red';
          MWClassShowTrialRecord.__super__.constructor.call(this, root, [], options);
        }

        MWClassShowTrialRecord.prototype.append = function(trialType, correct, param) {
          return this.addElement(trialType, correct, param);
        };

        MWClassShowTrialRecord.prototype.addElement = function(trialType, correct, param) {
          var col, el, x;
          col = correct ? this.colCorrect : this.colWrong;
          el = (function() {
            switch (trialType) {
              case 'construct':
                return this.root.show.ConstructFigure(param.parts, {
                  color: col
                });
              case 'assemblage':
                x = this.root.show.Assemblage({
                  color: col
                });
                x.addSet(param.set);
                x.rotate(param.rotation / 90);
                return x;
              case 'rotate':
                return this.root.show.RotateStimulus(param.shape, {
                  color: col,
                  orientation: param.orientation
                });
              default:
                throw "" + trialType + " is an invalid trial type.";
            }
          }).call(this);
          return MWClassShowTrialRecord.__super__.addElement.call(this, el);
        };

        return MWClassShowTrialRecord;

      })(MWClassShowStimulusGrid);

      return MWClassShow;

    })(MWClass);

    MWLearn.prototype.Input = function() {
      return new MWClassInput(this);
    };

    MWLearn.prototype.MWClassInput = MWClassInput = (function(_super) {
      __extends(MWClassInput, _super);

      MWClassInput.prototype._event_handlers = null;

      function MWClassInput(root) {
        MWClassInput.__super__.constructor.call(this, root);
        this._event_handlers = {
          key_down: [],
          mouse_down: []
        };
        $("\#" + this.root.container).keydown((function(_this) {
          return function(evt) {
            return _this._handleKey(evt, 'down');
          };
        })(this));
        $("\#" + this.root.container).mousedown((function(_this) {
          return function(evt) {
            return _this._handleMouse(evt, 'down');
          };
        })(this));
      }

      MWClassInput.prototype._handleEvent = function(evt, handlerType, fCheckHandler) {
        var handler, handlers, idx, idxRemove, _i, _j, _len, _len1, _results;
        handlers = this._event_handlers[handlerType];
        idxRemove = [];
        for (idx = _i = 0, _len = handlers.length; _i < _len; idx = ++_i) {
          handler = handlers[idx];
          if (fCheckHandler(handler)) {
            handler.f(evt);
            handler.count++;
            if (handler.expires !== 0 && handler.count >= handler.expires) {
              idxRemove.push(idx);
            }
          }
        }
        _results = [];
        for (_j = 0, _len1 = idxRemove.length; _j < _len1; _j++) {
          idx = idxRemove[_j];
          _results.push(handlers.splice(idx, 1));
        }
        return _results;
      };

      MWClassInput.prototype._handleKey = function(evt, eventType) {
        var fCheckHandler, handlerType;
        handlerType = "key_" + eventType;
        fCheckHandler = function(h) {
          return h.button === 'any' || evt.which === h.button;
        };
        return this._handleEvent(evt, handlerType, fCheckHandler);
      };

      MWClassInput.prototype._handleMouse = function(evt, eventType) {
        var fCheckHandler, handlerType;
        handlerType = "mouse_" + eventType;
        fCheckHandler = function(h) {
          return h.button === 'any' || evt.which === h.button;
        };
        return this._handleEvent(evt, handlerType, fCheckHandler);
      };

      MWClassInput.prototype.addHandler = function(type, options) {
        var handlerType, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        if (options == null) {
          options = null;
        }
        if (options == null) {
          options = {};
        }
        options.f = (_ref = options.f) != null ? _ref : null;
        options.expires = (_ref1 = options.expires) != null ? _ref1 : 0;
        switch (type) {
          case 'key':
            options.event = (_ref2 = options.event) != null ? _ref2 : 'down';
            options.button = this.key2code((_ref3 = options.button) != null ? _ref3 : 'any');
            break;
          case 'mouse':
            options.event = (_ref4 = options.event) != null ? _ref4 : 'down';
            options.button = this.mouse2code((_ref5 = options.button) != null ? _ref5 : 'any');
            break;
          default:
            throw "Invalid handler type";
        }
        options.count = 0;
        handlerType = "" + type + "_" + options.event;
        return this._event_handlers[handlerType].push(options);
      };

      MWClassInput.prototype.key2code = function(key) {
        switch (key) {
          case 'any':
            return 'any';
          case 'enter':
            return 13;
          case 'left':
            return 37;
          case 'up':
            return 38;
          case 'right':
            return 39;
          case 'down':
            return 40;
          default:
            if ((typeof key) === 'string') {
              return key.toUpperCase().charCodeAt(0);
            } else {
              return key;
            }
        }
      };

      MWClassInput.prototype.mouse2code = function(button) {
        switch (button) {
          case 'any':
            return 'any';
          case 'left':
            return 1;
          case 'middle':
            return 2;
          case 'right':
            return 3;
          default:
            throw "Invalid button";
        }
      };

      return MWClassInput;

    })(MWClass);

    MWLearn.prototype.Time = function() {
      return new MWClassTime(this);
    };

    MWLearn.prototype.MWClassTime = MWClassTime = (function(_super) {
      __extends(MWClassTime, _super);

      function MWClassTime() {
        return MWClassTime.__super__.constructor.apply(this, arguments);
      }

      MWClassTime.prototype.Now = function() {
        return new Date().getTime();
      };

      MWClassTime.prototype.Pause = function(ms) {
        var tStart, _results;
        tStart = this.Now();
        _results = [];
        while (this.Now() < tStart + ms) {
          _results.push(null);
        }
        return _results;
      };

      return MWClassTime;

    })(MWClass);

    MWLearn.prototype.Color = function() {
      return new MWClassColor(this);
    };

    MWLearn.prototype.MWClassColor = MWClassColor = (function(_super) {
      __extends(MWClassColor, _super);

      MWClassColor.prototype.colors = {
        "default": ['crimson', 'red', 'tomato', 'orangered', 'orange', 'gold', 'yellow', 'chartreuse', 'lime', 'limegreen', 'springgreen', 'aqua', 'turquoise', 'deepskyblue', 'blue', 'darkviolet', 'magenta', 'deeppink']
      };

      function MWClassColor(root) {
        MWClassColor.__super__.constructor.call(this, root);
        this.colors['difficulty'] = ['blue', 'limegreen', 'gold', 'orange', 'red'];
      }

      MWClassColor.prototype.pick = function(colorSet, interpolate) {
        var iColor, nColor;
        if (colorSet == null) {
          colorSet = 'default';
        }
        if (interpolate == null) {
          interpolate = false;
        }
        if (interpolate) {
          return this.blend(this.colors[colorSet], Math.random());
        } else {
          nColor = this.colors[colorSet].length;
          iColor = Math.floor(Math.random() * nColor);
          return this.colors[colorSet][iColor];
        }
      };

      MWClassColor.prototype.blend = function(colorSet, f) {
        var b, colFrom, colTo, fBlend, g, iBlend, iFrom, iTo, nColor, r;
        if (colorSet == null) {
          colorSet = 'default';
        }
        nColor = this.colors[colorSet].length;
        iBlend = Math.max(0, Math.min(nColor - 1, f * (nColor - 1)));
        iFrom = Math.floor(iBlend);
        iTo = Math.min(nColor - 1, iFrom + 1);
        fBlend = iBlend - iFrom;
        colFrom = Raphael.color(this.colors[colorSet][iFrom]);
        colTo = Raphael.color(this.colors[colorSet][iTo]);
        r = (1 - fBlend) * colFrom.r + fBlend * colTo.r;
        g = (1 - fBlend) * colFrom.g + fBlend * colTo.g;
        b = (1 - fBlend) * colFrom.b + fBlend * colTo.b;
        return Raphael.color("rgb(" + r + "," + g + "," + b + ")");
      };

      return MWClassColor;

    })(MWClass);

    MWLearn.prototype.Exec = function() {
      return new MWClassExec(this);
    };

    MWLearn.prototype.MWClassExec = MWClassExec = (function(_super) {
      var MWClassExecSequence, MWClassExecShow;

      __extends(MWClassExec, _super);

      function MWClassExec() {
        return MWClassExec.__super__.constructor.apply(this, arguments);
      }

      MWClassExec.prototype.Sequence = function(name, fStep, next, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassExecSequence(this.root, name, fStep, next, options);
      };

      MWClassExec.prototype.MWClassExecSequence = MWClassExecSequence = (function(_super1) {
        __extends(MWClassExecSequence, _super1);

        MWClassExecSequence.prototype._name = '';

        MWClassExecSequence.prototype._fStep = null;

        MWClassExecSequence.prototype._fCleanup = null;

        MWClassExecSequence.prototype._next = null;

        MWClassExecSequence.prototype._idx = 0;

        MWClassExecSequence.prototype._fCheck = null;

        MWClassExecSequence.prototype._timer = null;

        MWClassExecSequence.prototype._tStart = null;

        MWClassExecSequence.prototype._tStep = null;

        MWClassExecSequence.prototype._fPre = null;

        MWClassExecSequence.prototype.pre = null;

        MWClassExecSequence.prototype.finished = false;

        MWClassExecSequence.prototype.result = null;

        function MWClassExecSequence(root, name, fStep, next, options) {

          /*
            name: a unique name for the sequence
            fStep: array specifying the function to execute at each step
            next: array of:
              time: time to move on to the next step
              key: a key that must be down to move on
              f: a function that takes the sequence and step start times and
                returns true to move on
              ['key'/'mouse', options]: specify input event that must occur
              ['event', f] specify a function that will register an event that will
                call the function to move to the next step
              ['lazy', f] specify a function that will be called after the step is
                executed, take this object and the current step index as inputs,
                and returns one of the above
            options:
              description: a description of the sequence
              execute:  true to execute the sequence immediately
              mode: time mode ('step', 'sequence', or 'absolute')
              pre: a function that takes this object as input and returns an
                object of info to be stored in this object's pre property. the
                function is executed immediately before the first step.
              callback: a function to call when the sequence finishes. takes this
                        object as an input argument
              cleanup:  array specifying function to call after each step
           */
          var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
          MWClassExecSequence.__super__.constructor.call(this, root);
          this._fPre = (_ref = options.pre) != null ? _ref : null;
          options.execute = (_ref1 = options.execute) != null ? _ref1 : true;
          this.mode = (_ref2 = options.mode) != null ? _ref2 : "step";
          this.callback = (_ref3 = options.callback) != null ? _ref3 : null;
          this._fCleanup = (_ref4 = options.cleanup) != null ? _ref4 : null;
          this._name = name;
          this._description = (_ref5 = options.description) != null ? _ref5 : options.name;
          this._fStep = fStep;
          this._next = next;
          this.pre = {};
          this.setSequence();
          if (options.execute) {
            this.Execute();
          }
        }

        MWClassExecSequence.prototype.stepName = function(idx) {
          return "" + this._name + "_" + idx;
        };

        MWClassExecSequence.prototype.delayTime = function(t) {
          var tExec;
          tExec = (function() {
            switch (this.mode) {
              case "step":
                return this._tStep + t;
              case "relative":
                return this._tStart + t;
              case "absolute":
                return t;
              default:
                throw "Invalid time mode";
            }
          }).call(this);
          return tExec - this.root.time.Now();
        };

        MWClassExecSequence.prototype.checkNext = function() {
          if (this._fCheck(this._tStart, this._tStep)) {
            clearInterval(this._timer);
            return this.getFDoStep(this._idx)();
          }
        };

        MWClassExecSequence.prototype.setSequence = function() {
          var idx, nStep, _i, _ref;
          nStep = this._fStep.length + 1;
          for (idx = _i = 0, _ref = nStep - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
            this.root.queue.add(this.stepName(idx), ((function(_this) {
              return function() {
                return _this.processStep();
              };
            })(this)), {
              "do": false
            });
          }
          return this.result = (function() {
            var _j, _ref1, _results;
            _results = [];
            for (_j = 0, _ref1 = this._fStep.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--) {
              _results.push({
                t: {},
                output: {}
              });
            }
            return _results;
          }).call(this);
        };

        MWClassExecSequence.prototype.processStep = function() {
          this._tStep = this.root.time.Now();
          if (this._idx > 0) {
            this.cleanupStep(this._idx - 1);
          } else {
            this.startSequence();
          }
          if (this._idx === this._fStep.length) {
            return this.finishSequence();
          } else {
            this.executeStep(this._idx);
            this.parseNext(this._idx);
            return this._idx++;
          }
        };

        MWClassExecSequence.prototype.executeStep = function(idx) {
          this.result[idx].t.start = this.root.time.Now();
          return this.result[idx].output.step = this._fStep[idx] != null ? this._fStep[idx]() : null;
        };

        MWClassExecSequence.prototype.cleanupStep = function(idx) {
          var doFCleanup;
          this.result[idx].t.end = this.root.time.Now();
          doFCleanup = (this._fCleanup != null) && (this._fCleanup[idx] != null);
          return this.result[idx].output.cleanup = doFCleanup ? this._fCleanup[idx]() : null;
        };

        MWClassExecSequence.prototype.getFDoStep = function(idx) {
          return ((function(_this) {
            return function(i) {
              return function() {
                return _this.root.queue["do"](_this.stepName(i));
              };
            };
          })(this))(idx);
        };

        MWClassExecSequence.prototype.parseNext = function(idx, next) {
          var fDoStepNext, fRegister;
          if (next == null) {
            next = null;
          }
          fDoStepNext = this.getFDoStep(idx + 1);
          next = next != null ? next : this._next[idx];
          if (!isNaN(parseFloat(next))) {
            return window.setTimeout(fDoStepNext, this.delayTime(next));
          } else if ((typeof next) === 'string') {
            return this.parseNext(idx, [
              'key', {
                button: next
              }
            ]);
          } else if ((typeof next) === 'function') {
            this._fCheck = next;
            return this._timer = setInterval(((function(_this) {
              return function() {
                return _this.checkNext();
              };
            })(this)), 1);
          } else if (Array.isArray(next) && next.length >= 1) {
            switch (next[0]) {
              case 'key':
              case 'mouse':
                fRegister = (function(_this) {
                  return function(f) {
                    var fUser, options, _ref, _ref1;
                    options = next.length >= 2 ? next[1] : {};
                    options.event = (_ref = options.event) != null ? _ref : 'down';
                    options.button = (_ref1 = options.button) != null ? _ref1 : 'any';
                    options.expires = 1;
                    if (options.f != null) {
                      fUser = options.f;
                      options.f = function() {
                        fUser();
                        return f();
                      };
                    } else {
                      options.f = f;
                    }
                    return _this.root.input.addHandler(next[0], options);
                  };
                })(this);
                return this.parseNext(idx, ['event', fRegister]);
              case 'event':
                return next[1](fDoStepNext);
              case 'lazy':
                return this.parseNext(idx, next[1](this, idx));
              default:
                throw "Invalid next value";
            }
          } else {
            throw "Invalid next value";
          }
        };

        MWClassExecSequence.prototype.startSequence = function() {
          var _ref;
          this._tStart = (_ref = this._tStep) != null ? _ref : this.root.time.Now();
          this.base.action.start(this._name, this._description);
          if (this._fPre != null) {
            return this.pre = this._fPre(this);
          }
        };

        MWClassExecSequence.prototype.finishSequence = function() {
          if (this.callback != null) {
            this.callback(this);
          }
          this.finished = true;
          return this.base.action.stop(this._name);
        };

        MWClassExecSequence.prototype.Execute = function() {
          this.finished = false;
          this._idx = 0;
          return this.getFDoStep(0)();
        };

        return MWClassExecSequence;

      })(MWClass);

      MWClassExec.prototype.Show = function(name, stim, next, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassExecShow(this.root, name, stim, next, options);
      };

      MWClassExec.prototype.MWClassExecShow = MWClassExecShow = (function(_super1) {
        __extends(MWClassExecShow, _super1);

        MWClassExecShow.prototype.contain = true;

        MWClassExecShow.prototype._stim = null;

        MWClassExecShow.prototype._stimStep = null;

        MWClassExecShow.prototype._stimSequence = null;

        MWClassExecShow.prototype._fixation = false;

        MWClassExecShow.prototype._cleanupStim = null;

        function MWClassExecShow(root, name, stim, next, options) {

          /*
            name: a name for the sequence
            stim: an array of arrays of:
              [<name of show class>, <arg1 to show class>, ...]
              a Stimulus (hidden)
              a function that takes this object and the current step index and
                returns an array of the above
            next: see MWExecute.Sequence, or
              ['choice', options] (create MWShow.Choice from current stimuli)
              ['test', options] (create MWShow.Test from current stimuli)
            options:
              cleanupStim: the type of stimulus cleanup to perform. one of:
                'step': cleanup stimuli at the start of the next step
                'sequence': cleanup stimuli at the end of the sequence
                'none': don't cleanup stimuli
              fixation: true to show the fixation dot at each step
              contain: true to contain stimuli within the screen
              (see Sequence super class)
           */
          var _ref, _ref1, _ref2;
          this._cleanupStim = (_ref = options.cleanupStim) != null ? _ref : 'step';
          this._fixation = (_ref1 = options.fixation) != null ? _ref1 : false;
          this.contain = (_ref2 = options.contain) != null ? _ref2 : true;
          this._stim = stim;
          this._stimStep = (function() {
            var _i, _ref3, _results;
            _results = [];
            for (_i = 1, _ref3 = stim.length; 1 <= _ref3 ? _i <= _ref3 : _i >= _ref3; 1 <= _ref3 ? _i++ : _i--) {
              _results.push([]);
            }
            return _results;
          })();
          this._stimSequence = [];
          MWClassExecShow.__super__.constructor.call(this, root, name, (function() {
            var _i, _ref3, _results;
            _results = [];
            for (_i = 1, _ref3 = stim.length; 1 <= _ref3 ? _i <= _ref3 : _i >= _ref3; 1 <= _ref3 ? _i++ : _i--) {
              _results.push(null);
            }
            return _results;
          })(), next, options);
        }

        MWClassExecShow.prototype.storeStimulus = function(stim, idx) {
          this._stimStep[idx].push(stim);
          this._stimSequence.push(stim);
          return stim;
        };

        MWClassExecShow.prototype.executeStep = function(idx) {
          var fixArg, fixObj, stim, stimuli, _i, _len;
          MWClassExecShow.__super__.executeStep.call(this, idx);
          stimuli = forceArray(this._stim[idx]);
          if (this._fixation) {
            fixObj = this.root.fixation[0];
            fixArg = this.root.fixation[1];
            stimuli.push([fixObj].concat(__slice.call(fixArg)));
          }
          for (_i = 0, _len = stimuli.length; _i < _len; _i++) {
            stim = stimuli[_i];
            this.parseStimulus(stim, idx);
          }
          return this.result[idx].t.show = this.root.time.Now();
        };

        MWClassExecShow.prototype.parseStimulus = function(stim, idx) {
          var hTotal, s, wTotal, _i, _len, _ref, _ref1, _results;
          if (Array.isArray(stim) && stim.length > 0 && (typeof stim[0] === 'string')) {
            return this.parseStimulus((_ref = this.root.show)[stim[0]].apply(_ref, stim.slice(1)), idx);
          } else if (stim != null) {
            wTotal = this.root.width();
            hTotal = this.root.height();
            _ref1 = forceArray(stim);
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              s = _ref1[_i];
              if (s instanceof this.root.show.MWClassShowStimulus) {
                this.storeStimulus(s, idx);
                if (this.contain) {
                  s.contain();
                }
                _results.push(s.show(true));
              } else if (s instanceof Function) {
                _results.push(this.parseStimulus(s(this, idx), idx));
              } else if (Array.isArray(s)) {
                _results.push(this.parseStimulus(s, idx));
              } else {
                throw "Invalid stimulus";
              }
            }
            return _results;
          } else {
            return null;
          }
        };

        MWClassExecShow.prototype.cleanupStep = function(idx) {
          var stim, _i, _j, _len, _len1, _ref, _ref1;
          MWClassExecShow.__super__.cleanupStep.call(this, idx);
          if (this._cleanupStim === 'step') {
            _ref = this._stimStep[idx];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              stim = _ref[_i];
              stim.remove();
            }
          } else {
            _ref1 = this._stimStep[idx];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              stim = _ref1[_j];
              stim.show(false);
            }
          }
          return this.result[idx].t.remove = this.root.time.Now();
        };

        MWClassExecShow.prototype.parseNext = function(idx, next) {
          var fCallback, fDoStepNext, options, stim, _ref, _ref1;
          if (next == null) {
            next = null;
          }
          next = next != null ? next : this._next[idx];
          if (Array.isArray(next) && (next[0] === 'choice' || next[0] === 'test')) {
            fDoStepNext = this.getFDoStep(idx + 1);
            options = (_ref = next[1]) != null ? _ref : {};
            fCallback = (_ref1 = options.callback) != null ? _ref1 : null;
            options.callback = (function(_this) {
              return function(obj, i) {
                _this.result[idx].t.choice = obj._tChoice;
                _this.result[idx].t.rt = _this.result[idx].t.choice - _this.result[idx].t.show;
                _this.result[idx].choice = i;
                if (obj instanceof _this.root.show.MWClassShowTest) {
                  _this.result[idx].correct = obj.correct;
                }
                if (fCallback != null) {
                  fCallback(i);
                }
                return fDoStepNext();
              };
            })(this);
            stim = this.root.show[capitalize(next[0])](this._stimStep[idx], options);
            return this.storeStimulus(stim, idx);
          } else {
            return MWClassExecShow.__super__.parseNext.call(this, idx, next);
          }
        };

        MWClassExecShow.prototype.finishSequence = function() {
          var stim, _i, _len, _ref;
          MWClassExecShow.__super__.finishSequence.call(this);
          if (this._cleanupStim === 'sequence') {
            _ref = this._stimSequence;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              stim = _ref[_i];
              stim.remove();
            }
          }
          if (this._cleanupStim !== 'none') {
            this._stimSequence = [];
            return this._stimStep = [];
          }
        };

        return MWClassExecShow;

      })(MWClassExecSequence);

      return MWClassExec;

    })(MWClass);

    MWLearn.prototype.Queue = function() {
      return new MWClassQueue(this);
    };

    MWLearn.prototype.MWClassQueue = MWClassQueue = (function(_super) {
      __extends(MWClassQueue, _super);

      MWClassQueue.prototype._queue = null;

      function MWClassQueue(root) {
        MWClassQueue.__super__.constructor.call(this, root);
        this.clear();
      }

      MWClassQueue.prototype.length = function() {
        return this._queue.length;
      };

      MWClassQueue.prototype.add = function(name, f, options) {
        var _ref;
        if (options == null) {
          options = {};
        }
        options["do"] = (_ref = options["do"]) != null ? _ref : true;
        this._queue.push({
          name: name,
          f: f,
          ready: false
        });
        if (options["do"]) {
          return this["do"](name);
        }
      };

      MWClassQueue.prototype["do"] = function(name) {
        var i, _i, _ref, _results, _results1;
        if (name == null) {
          name = null;
        }
        if (this._queue.length > 0) {
          if ((name == null) && this._queue[0].ready) {
            return this["do"](this._queue[0].name);
          } else if (this._queue[0].name === name && this.root.ready()) {
            this._queue[0].ready = true;
            _results = [];
            while (this._queue.length > 0 && this._queue[0].ready) {
              _results.push(this._queue.shift().f());
            }
            return _results;
          } else {
            _results1 = [];
            for (i = _i = 0, _ref = this._queue.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (this._queue[i].name === name) {
                this._queue[i].ready = true;
                break;
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }
        }
      };

      MWClassQueue.prototype.clear = function() {
        return this._queue = [];
      };

      return MWClassQueue;

    })(MWClass);

    MWLearn.prototype.Data = function() {
      return new MWClassData(this);
    };

    MWLearn.prototype.MWClassData = MWClassData = (function(_super) {
      var MWClassDataVariable;

      __extends(MWClassData, _super);

      MWClassData.prototype.timeout = null;

      MWClassData.prototype._local = false;

      MWClassData.prototype._local_datastore = null;

      MWClassData.prototype._archive = null;

      MWClassData.prototype._numBusy = 0;

      MWClassData.prototype._failed = false;

      MWClassData.prototype._failSafeExecuted = false;

      MWClassData.prototype._failSafeCallback = null;

      function MWClassData(root, options) {
        var _ref, _ref1;
        if (options == null) {
          options = {};
        }
        MWClassData.__super__.constructor.call(this, root);
        this.timeout = (_ref = options.timeout) != null ? _ref : 10000;
        this._local = (_ref1 = options.local) != null ? _ref1 : !(this.root.type === 'experiment');
        this._local_datastore = {};
        this._archive = {};
        this.load();
      }

      MWClassData.prototype.load = function() {
        this.block('loading data');
        return this.read('keys', {
          store: false,
          callback: (function(_this) {
            return function(result) {
              return _this.loadCallback(result);
            };
          })(this)
        });
      };

      MWClassData.prototype.loadCallback = function(result) {
        var key, keys, _i, _len, _ref, _results;
        keys = (_ref = result.value) != null ? _ref : null;
        if (keys != null) {
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            this._numBusy++;
            _results.push(this.read(key, {
              callback: (function(_this) {
                return function(result) {
                  return _this.unblock();
                };
              })(this)
            }));
          }
          return _results;
        } else {
          return this.unblock();
        }
      };

      MWClassData.prototype.save = function(options) {
        var key, time, _ref, _ref1, _results;
        if (options == null) {
          options = {};
        }
        options.callback = (_ref = options.callback) != null ? _ref : null;
        options.previous_failure = (_ref1 = options.previous_failure) != null ? _ref1 : this._failed;
        this.block('saving data');
        for (key in this._local_datastore) {
          this._numBusy++;
          this.write(key, this._local_datastore[key], {
            store: false,
            callback: (function(_this) {
              return function(result) {
                return _this.saveCallback(result, options);
              };
            })(this)
          });
        }
        _results = [];
        for (key in this._archive) {
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (time in this._archive[key]) {
              this._numBusy++;
              _results1.push(this.archive(key, {
                store: false,
                time: time,
                callback: (function(_this) {
                  return function(result) {
                    return _this.saveCallback(result, options);
                  };
                })(this)
              }));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      MWClassData.prototype.saveCallback = function(result, options) {
        if (options.callback != null) {
          this.root.queue.add('save_callback', (function(_this) {
            return function() {
              return options.callback();
            };
          })(this));
        }
        if (!result.success && options.previous_failure) {
          return this.failSafe({
            callback: (function(_this) {
              return function() {
                return _this.unblock();
              };
            })(this)
          });
        } else {
          return this.unblock();
        }
      };

      MWClassData.prototype.block = function(description) {
        this._numBusy = 0;
        this.root.action.start('data_process', description);
        return this.root.queue.add('data_block', (function() {
          return null;
        }), {
          "do": false
        });
      };

      MWClassData.prototype.unblock = function() {
        if (this._numBusy > 0) {
          this._numBusy--;
        }
        if (this._numBusy === 0) {
          this.root.action.stop('data_process');
          return this.root.queue["do"]('data_block');
        }
      };

      MWClassData.prototype.ajax = function(data, options) {
        data.csrfmiddlewaretoken = this.base.csrf;
        return $.ajax({
          type: 'POST',
          url: '/data/',
          data: data,
          success: (function(_this) {
            return function(result) {
              return _this["" + data.action + "Callback"](result, options);
            };
          })(this),
          error: (function(_this) {
            return function(jqXHR, status, err) {
              return _this.failure();
            };
          })(this),
          timeout: this.timeout
        });
      };

      MWClassData.prototype.read = function(key, options) {
        var data, result, _ref, _ref1, _ref2;
        if (options == null) {
          options = {};
        }
        options.force_remote = (_ref = options.force_remote) != null ? _ref : false;
        options.store = (_ref1 = options.store) != null ? _ref1 : true;
        options.callback = (_ref2 = options.callback) != null ? _ref2 : null;
        if (this._local || (!options.force_remote && key in this._local_datastore)) {
          result = {
            success: true,
            action: 'read',
            key: key,
            status: key in this._local_datastore ? 'read' : 'nonexistent',
            value: this._local_datastore[key]
          };
          return window.setTimeout(((function(_this) {
            return function() {
              return _this.readCallback(result, options);
            };
          })(this)), 0);
        } else {
          data = {
            action: 'read',
            key: key
          };
          return this.ajax(data, options);
        }
      };

      MWClassData.prototype.readCallback = function(result, options) {
        if (result.success) {
          if (options.store && result.status === 'read') {
            this._local_datastore[result.key] = result.value;
          }
        } else {
          this.failure();
        }
        if (options.callback != null) {
          return options.callback(result);
        }
      };

      MWClassData.prototype.write = function(key, value, options) {
        var data, newKey, result, _ref, _ref1;
        if (options == null) {
          options = {};
        }
        options.store = (_ref = options.store) != null ? _ref : true;
        options.callback = (_ref1 = options.callback) != null ? _ref1 : null;
        if (options.store) {
          newKey = !(key in this._local_datastore);
          this._local_datastore[key] = value;
          if (newKey) {
            this.write('keys', Object.keys(this._local_datastore), {
              store: false
            });
          }
        }
        if (this._local) {
          result = {
            success: true,
            action: 'write',
            key: key,
            status: 'write'
          };
          return window.setTimeout(((function(_this) {
            return function() {
              return _this.writeCallback(result, options);
            };
          })(this)), 0);
        } else {
          data = {
            action: 'write',
            key: key,
            value: JSON.stringify(value)
          };
          return this.ajax(data, options);
        }
      };

      MWClassData.prototype.writeCallback = function(result, options) {
        if (!result.success) {
          this.failure();
        }
        if (options.callback != null) {
          return options.callback(result);
        }
      };

      MWClassData.prototype.archive = function(key, options) {
        var data, result, _ref, _ref1, _ref2;
        if (options == null) {
          options = {};
        }
        options.store = (_ref = options.store) != null ? _ref : true;
        options.callback = (_ref1 = options.callback) != null ? _ref1 : null;
        options.time = (_ref2 = options.time) != null ? _ref2 : this.root.time.Now();
        if (options.store) {
          if (!(key in this._archive)) {
            this._archive[key] = {};
          }
          this._archive[key][options.time] = this._local_datastore[key];
        }
        if (this._local) {
          result = {
            success: true,
            action: 'archive',
            key: key,
            status: 'archive',
            time: options.time
          };
          return window.setTimeout(((function(_this) {
            return function() {
              return _this.archiveCallback(result, options);
            };
          })(this)), 0);
        } else {
          data = {
            action: 'archive',
            key: key,
            time: options.time,
            value: JSON.stringify(this._local_datastore[key])
          };
          return this.ajax(data, options);
        }
      };

      MWClassData.prototype.archiveCallback = function(result, options) {
        if (!result.success) {
          this.failure();
        }
        if (options.callback != null) {
          return options.callback(result);
        }
      };

      MWClassData.prototype.failure = function() {
        return this._failed = true;
      };

      MWClassData.prototype.failSafe = function(options) {
        var failSafeData, mailBody, mailSubject, _ref;
        if (!this._failSafeExecuted) {
          this._failSafeCallback = (_ref = options.callback) != null ? _ref : null;
          this._failSafeExecuted = true;
          failSafeData = "" + (JSON.stringify(this._local_datastore)) + "\n\n" + (JSON.stringify(this._archive));
          $('#failsafe_data').val(failSafeData);
          mailSubject = encodeURIComponent("Session Data for " + this.base.user);
          mailBody = failSafeData.length < 2000 ? encodeURIComponent(failSafeData) : '';
          $('#failsafe_mailto').attr("href", "mailto:schlegel@gmail.com?subject=" + mailSubject + "&body=" + mailBody);
          return $('#failsafe').show();
        } else {
          if (options.callback) {
            return options.callback();
          }
        }
      };

      MWClassData.prototype.failSafeHide = function() {
        $('#failsafe').hide();
        if (this._failSafeCallback != null) {
          return this._failSafeCallback();
        }
      };

      MWClassData.prototype.Variable = function(key, value, options) {
        if (options == null) {
          options = {};
        }
        return new MWClassDataVariable(this, key, value, options);
      };

      MWClassData.prototype.MWClassDataVariable = MWClassDataVariable = (function() {
        MWClassDataVariable.prototype.track = false;

        MWClassDataVariable.prototype._data = null;

        MWClassDataVariable.prototype._key = null;

        MWClassDataVariable.prototype._value = null;

        MWClassDataVariable.prototype._initialized = false;

        function MWClassDataVariable(data, key, value, options) {

          /*
            data: the parent MWClassData object
            key: the variable name
            value: the variable value
            options:
              track: true to archive each change to the variable
              timeout: the number of milliseconds before the variable value resets
                to its initial value
              timeout_type: one of the following:
                'session': value will only reset in between sessions
                'instant': value will reset immediately after timeout
              callback: a function that takes the variable as an input and is
                called after the variable is initialized
           */
          var _ref, _ref1, _ref2, _ref3;
          this._data = data;
          this.track = (_ref = options.track) != null ? _ref : false;
          options.timeout = (_ref1 = options.timeout) != null ? _ref1 : null;
          options.timeout_type = (_ref2 = options.timeout_type) != null ? _ref2 : 'session';
          options.callback = (_ref3 = options.callback) != null ? _ref3 : null;
          this._key = key;
          this._value = {
            value: value
          };
          if (options.timeout != null) {
            this._value.timeout = options.timeout;
            this._value.timeout_type = options.timeout_type;
          }
          this.update(options);
        }

        MWClassDataVariable.prototype.update = function(options) {
          if (options == null) {
            options = {};
          }
          return this._data.read(this._key, {
            callback: (function(_this) {
              return function(result) {
                return _this.dataCallback(result, options);
              };
            })(this)
          });
        };

        MWClassDataVariable.prototype.initialize = function() {
          if (this._value.timeout != null) {
            this._value.initial = this._value.value;
          }
          return this.reset();
        };

        MWClassDataVariable.prototype.reset = function() {
          if (this._value.timeout != null) {
            this._value.reset_time = this._data.root.time.Now();
            return this.set(this._value.initial);
          } else {
            return this.set(this._value.value);
          }
        };

        MWClassDataVariable.prototype.dataCallback = function(result, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          options.callback = (_ref = options.callback) != null ? _ref : null;
          if (result.success) {
            switch (result.status) {
              case 'nonexistent':
                this.initialize();
                break;
              case 'read':
                this._value = result.value;
                this.checkTimeout();
                break;
              case 'write':
                if (this.track && (this.get() != null)) {
                  this._data.archive(this._key, {
                    callback: (function(_this) {
                      return function(result) {
                        return _this.dataCallback(result);
                      };
                    })(this)
                  });
                }
                this.checkTimeout();
                break;
              case 'archive':
                null;
                break;
              default:
                null;
            }
            if (!this._initialized) {
              this._initialized = true;
            }
            if (options.callback != null) {
              return options.callback(this);
            }
          }
        };

        MWClassDataVariable.prototype.checkTimeout = function() {
          if ((this._value.timeout != null) && (this._value.timeout_type === 'instant' || !this._initialized)) {
            if (this._data.root.time.Now() >= this.nextReset()) {
              return this.reset();
            }
          }
        };

        MWClassDataVariable.prototype.nextReset = function() {
          if (this._value.timeout != null) {
            return this._value.reset_time + this._value.timeout;
          } else {
            return null;
          }
        };

        MWClassDataVariable.prototype.get = function() {
          return this._value.value;
        };

        MWClassDataVariable.prototype.set = function(value) {
          this._value.value = value;
          this._data.write(this._key, this._value, {
            callback: (function(_this) {
              return function(result) {
                return _this.dataCallback(result);
              };
            })(this)
          });
          return this;
        };

        return MWClassDataVariable;

      })();

      return MWClassData;

    })(MWClass);

    MWLearn.prototype.Game = function() {
      return new MWClassGame(this);
    };

    MWLearn.prototype.MWClassGame = MWClassGame = (function(_super) {
      var MWClassGameAssemblage, MWClassGameBase, MWClassGameConstruct, MWClassGameRotate;

      __extends(MWClassGame, _super);

      MWClassGame.prototype.gameNames = null;

      function MWClassGame(root) {
        var game, _i, _len, _ref;
        MWClassGame.__super__.constructor.call(this, root);
        this.gameNames = ['construct', 'assemblage', 'rotate'];
        _ref = this.gameNames;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          game = _ref[_i];
          this[game] = this[capitalize(game)]();
        }
      }

      MWClassGame.prototype.MWClassGameBase = MWClassGameBase = (function(_super1) {
        __extends(MWClassGameBase, _super1);

        MWClassGameBase.prototype.name = '';

        MWClassGameBase.prototype.record = null;

        MWClassGameBase.prototype.popup = null;

        MWClassGameBase.prototype.current_trial = 0;

        MWClassGameBase.prototype.trial_result = null;

        MWClassGameBase.prototype.trials_finished = null;

        MWClassGameBase.prototype.nDistractor = 3;

        MWClassGameBase.prototype.tPrompt = 2000;

        MWClassGameBase.prototype.tOperate = 6000;

        MWClassGameBase.prototype.tTest = 3000;

        MWClassGameBase.prototype.tFeedback = 2000;

        MWClassGameBase.prototype.lastCorrect = null;

        MWClassGameBase.prototype.streakLength = 0;

        MWClassGameBase.prototype.skillInit = 0;

        MWClassGameBase.prototype.skillStep = 0.01;

        MWClassGameBase.prototype.skillMin = 0;

        MWClassGameBase.prototype.skillMax = 1;

        MWClassGameBase.prototype.skillName = 'skill';

        MWClassGameBase.prototype.skill = null;

        MWClassGameBase.prototype._doOperate = true;

        function MWClassGameBase(root, name) {
          MWClassGameBase.__super__.constructor.call(this, root);
          this.name = name;
          this.record = objPath(this, 'root', 'el', 'history', 'el', 'record');
          this.popup = objPath(this, 'base', 'el', 'popup');
          this.trial_result = this.root.data.Variable("" + this.name + "_trial_result", null, {
            track: true
          });
          this.trials_finished = this.root.data.Variable("" + this.name + "_trials_finished", 0);
          this.skill = this.root.data.Variable("" + this.name + "_skill", this.skillInit);
        }

        MWClassGameBase.prototype.trialName = function(options) {
          var trial, _ref;
          if (options == null) {
            options = {};
          }
          trial = (_ref = options.trial) != null ? _ref : this.current_trial;
          return "" + this.name + "trial" + trial;
        };

        MWClassGameBase.prototype.trialDescription = function(options) {
          var description, extra, param, skill, strExtra, trial, _ref, _ref1, _ref2, _ref3, _ref4;
          if (options == null) {
            options = {};
          }
          trial = (_ref = options.trial) != null ? _ref : this.current_trial;
          extra = (_ref1 = options.extra) != null ? _ref1 : false;
          description = (_ref2 = options.description) != null ? _ref2 : "" + (capitalize(this.name)) + " trial " + (trial + 1);
          param = (_ref3 = options.param) != null ? _ref3 : {};
          skill = (_ref4 = param[this.skillName]) != null ? _ref4 : this.skill.get();
          strExtra = extra ? " (" + this.skillName + "=" + skill + ")" : '';
          return "" + description + strExtra;
        };

        MWClassGameBase.prototype.create = function(param) {
          throw 'not implemented';
        };

        MWClassGameBase.prototype.createDistractors = function(target) {
          return target.createDistractors(this.nDistractor, {
            show: false
          });
        };

        MWClassGameBase.prototype.prompt = function(target) {
          return this.root.show.Text('Do something');
        };

        MWClassGameBase.prototype.promptStim = function() {
          return (function(_this) {
            return function(s, idx) {
              return _this.prompt(s.pre.target);
            };
          })(this);
        };

        MWClassGameBase.prototype.promptNext = function() {
          return this.tPrompt;
        };

        MWClassGameBase.prototype.operate = function(target) {
          return null;
        };

        MWClassGameBase.prototype.operateStim = function() {
          return (function(_this) {
            return function(s, idx) {
              return _this.operate(s.pre.target);
            };
          })(this);
        };

        MWClassGameBase.prototype.operateNext = function() {
          return this.tOperate;
        };

        MWClassGameBase.prototype.test = function(target) {
          var distractor, test, _i, _len;
          target.correct = true;
          test = forceArray(this.createDistractors(target));
          for (_i = 0, _len = test.length; _i < _len; _i++) {
            distractor = test[_i];
            distractor.correct = false;
          }
          test.push(target);
          randomize(test);
          return test;
        };

        MWClassGameBase.prototype.testStim = function() {
          return (function(_this) {
            return function(s, idx) {
              return _this.test(s.pre.target);
            };
          })(this);
        };

        MWClassGameBase.prototype.testNext = function() {
          return [
            'test', {
              timeout: this.tTest
            }
          ];
        };

        MWClassGameBase.prototype.feedback = function(target, correct, choice) {
          var strFeedback, text, xFeedback, yFeedback;
          xFeedback = target.attr("x");
          yFeedback = target.attr("y") + target.attr("height") / 2 + 36;
          strFeedback = correct ? "Yes!" : choice != null ? "No!" : 'Too Slow!';
          text = this.root.show.Text(strFeedback, {
            x: xFeedback,
            y: yFeedback,
            "font-size": 36,
            "text-anchor": "middle"
          });
          return [target, text];
        };

        MWClassGameBase.prototype.feedbackStim = function() {
          return (function(_this) {
            return function(s, idx) {
              return _this.feedback(s.pre.target, s.result[idx - 1].correct, s.result[idx - 1].choice);
            };
          })(this);
        };

        MWClassGameBase.prototype.feedbackNext = function() {
          return this.tFeedback;
        };

        MWClassGameBase.prototype.trial = function(param, options) {
          var description, f, next, paramStart, prompt, promptDescription, shw, stim, trialName, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
          if (param == null) {
            param = null;
          }
          if (options == null) {
            options = {};
          }

          /*
            options:
              trial: the trial to run
              skill: the normalized skill level for the current trial (0->1)
              cleanupStim: the show sequence stimulus cleanup option
              countdown: true to countdown the session timer
              description: the trial description
              pre: a function to execute before starting the sequence
              callback: function to run at the end of the show sequence
           */
          options.trial = (_ref = options.trial) != null ? _ref : this.current_trial;
          options.skill = (_ref1 = options.skill) != null ? _ref1 : null;
          options.cleanupStim = (_ref2 = options.cleanupStim) != null ? _ref2 : 'sequence';
          options.countdown = (_ref3 = options.countdown) != null ? _ref3 : true;
          param = this.getTrialParam(param, options.skill);
          description = (_ref4 = options.description) != null ? _ref4 : null;
          options.description = this.trialDescription({
            trial: options.trial,
            description: description,
            param: param,
            extra: this.base.debug
          });
          options.pre = (_ref5 = options.pre) != null ? _ref5 : (function(_this) {
            return function(shw) {
              return {
                param: param,
                target: _this.create(param)
              };
            };
          })(this);
          stim = [];
          next = [];
          paramStart = options.countdown ? {
            f: (function(_this) {
              return function() {
                return _this.root.session.startTimer();
              };
            })(this)
          } : {};
          promptDescription = this.trialDescription({
            trial: options.trial,
            description: description,
            param: param
          });
          prompt = "Click to begin " + promptDescription + ".";
          if (options.trial === 0) {
            prompt += "\n \nClick the tutorial on the left for a refresher.";
          }
          stim.push([['Instructions', prompt]]);
          next.push(['mouse', paramStart]);
          stim.push(this.promptStim());
          next.push(this.promptNext());
          if (this._doOperate) {
            stim.push(this.operateStim());
            next.push(this.operateNext());
          }
          stim.push(this.testStim());
          next.push(this.testNext());
          stim.push(this.feedbackStim());
          next.push(this.feedbackNext());
          f = (_ref6 = options.callback) != null ? _ref6 : null;
          options.callback = (function(_this) {
            return function(shw) {
              _this.trialEnd(shw, options.countdown);
              if (f != null) {
                return f(shw);
              }
            };
          })(this);
          trialName = this.trialName({
            trial: options.trial
          });
          return shw = this.root.exec.Show("" + trialName, stim, next, options);
        };

        MWClassGameBase.prototype.color = function(x) {
          return this.root.color.pick();
        };

        MWClassGameBase.prototype.stepSkill = function(correct) {
          var skillNew, step;
          if (correct === this.lastCorrect) {
            this.streakLength += 1;
          } else {
            this.lastCorrect = correct;
            this.streakLength = 1;
          }
          step = this.streakLength * this.skillStep * (correct ? 1 : -1);
          skillNew = Math.min(this.skillMax, Math.max(this.skillMin, this.skill.get() + step));
          return this.skill.set(skillNew);
        };

        MWClassGameBase.prototype.getTrialParam = function(param, skill) {
          var _ref;
          if (param == null) {
            param = {};
          }
          if (skill == null) {
            skill = null;
          }
          param[this.skillName] = (_ref = param[this.skillName]) != null ? _ref : skill != null ? this.skillMin + skill * (this.skillMax - this.skillMin) : this.skill.get();
          return param;
        };

        MWClassGameBase.prototype.trialResult = function(shw) {
          return merge(shw.pre.param, shw.result[shw.result.length - 2]);
        };

        MWClassGameBase.prototype.trialEnd = function(shw, countdown) {
          var result;
          result = this.trialResult(shw);
          this.trial_result.set(result);
          this.stepSkill(result.correct);
          if (this.record != null) {
            this.record.append(this.name, result.correct, shw.pre.param);
          }
          if (countdown) {
            this.root.session.stopTimer();
          }
          this.current_trial += 1;
          return this.trials_finished.set(this.trials_finished.get() + 1);
        };

        MWClassGameBase.prototype.tutorial = function() {
          if (this.root.type !== 'popup') {
            return this.base.el.popup.game[this.name].tutorial();
          } else {
            this.root.queue.add('tutorial_start', ((function(_this) {
              return function(that) {
                return function() {
                  return that.tutorialStart();
                };
              };
            })(this))(this));
            this.root.queue.add('tutorial_intro', ((function(_this) {
              return function(that) {
                return function() {
                  return that.tutorialIntro();
                };
              };
            })(this))(this));
            return this.root.queue.add('tutorial_step', ((function(_this) {
              return function(that) {
                return function() {
                  return that.tutorialStep();
                };
              };
            })(this))(this));
          }
        };

        MWClassGameBase.prototype.tutorialStart = function() {
          return this.root.visible(true);
        };

        MWClassGameBase.prototype.tutorialIntro = function() {
          var idx, next, shw, stim, stimCur;
          stim = [];
          next = [];
          idx = 1;
          while (this["tutorialIntro" + idx] != null) {
            stimCur = ((function(_this) {
              return function(fStimIntro) {
                return function(s, idx) {
                  stim = forceArray(fStimIntro());
                  stim.push(_this.root.show.Text('Click anywhere to continue.', {
                    l: 10,
                    t: 10
                  }));
                  return stim;
                };
              };
            })(this))(this["tutorialIntro" + idx]());
            stim.push(stimCur);
            next.push(['mouse']);
            idx++;
          }
          return shw = this.root.exec.Show("" + this.name + "_tutorial_intro", stim, next, {
            description: "" + (capitalize(this.name)) + " tutorial introduction"
          });
        };

        MWClassGameBase.prototype.tutorialStep = function(responseYes) {
          if (responseYes == null) {
            responseYes = true;
          }
          if (responseYes) {
            return this.tutorialTrial();
          } else {
            return this.tutorialEnd();
          }
        };

        MWClassGameBase.prototype.tutorialTrial = function() {
          return this.trial(null, {
            trial: 'practice',
            callback: (function(_this) {
              return function(shw) {
                return _this.tutorialPrompt();
              };
            })(this),
            description: "a practice " + (capitalize(this.name)) + " trial"
          });
        };

        MWClassGameBase.prototype.tutorialPrompt = function() {
          return this.root.show.YesNo('Try another trial?', {
            callback: (function(_this) {
              return function(response) {
                return _this.tutorialStep(response);
              };
            })(this)
          });
        };

        MWClassGameBase.prototype.tutorialEnd = function() {
          return this.root.visible(false);
        };

        return MWClassGameBase;

      })(MWClass);

      MWClassGame.prototype.Construct = function() {
        return new MWClassGameConstruct(this.root);
      };

      MWClassGame.prototype.MWClassGameConstruct = MWClassGameConstruct = (function(_super1) {
        __extends(MWClassGameConstruct, _super1);

        MWClassGameConstruct.prototype.nPart = 100;

        MWClassGameConstruct.prototype.skillInit = 0.05;

        MWClassGameConstruct.prototype.skillStep = 0.01;

        MWClassGameConstruct.prototype.skillMin = 0;

        MWClassGameConstruct.prototype.skillMax = 1;

        MWClassGameConstruct.prototype.skillName = 'd';

        function MWClassGameConstruct(root) {
          MWClassGameConstruct.__super__.constructor.call(this, root, 'construct');
        }

        MWClassGameConstruct.prototype.srcPart = function(i, position) {
          var p, srcAll, _ref;
          if (position == null) {
            position = 0;
          }
          if (i === "all") {
            srcAll = (function() {
              var _i, _results;
              _results = [];
              for (p = _i = 0; _i <= 3; p = ++_i) {
                _results.push((function() {
                  var _j, _ref, _results1;
                  _results1 = [];
                  for (i = _j = 0, _ref = this.nPart - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
                    _results1.push(this.srcPart(i, p));
                  }
                  return _results1;
                }).call(this));
              }
              return _results;
            }).call(this);
            return (_ref = []).concat.apply(_ref, srcAll);
          } else {
            return "/static/mwlearnapp/images/construct/part/" + position + "/" + (zpad(i, 3)) + ".png";
          }
        };

        MWClassGameConstruct.prototype.partRange = function(d) {
          var iFirst, iLast;
          iLast = Math.min(this.nPart - 1, 1 + Math.floor(d * (this.nPart - 1)));
          iFirst = Math.max(0, iLast - 25);
          return [iFirst, iLast];
        };

        MWClassGameConstruct.prototype.pickOne = function(d, exclude) {
          var part;
          if (exclude == null) {
            exclude = null;
          }
          while (true) {
            part = randomInt.apply(null, this.partRange(d));
            if ((exclude == null) || part !== exclude) {
              break;
            }
          }
          return part;
        };

        MWClassGameConstruct.prototype.pick = function(n, d) {
          var i, parts, pickNext, rng, rngMid, soFar, _i, _ref;
          rng = this.partRange(d);
          rngMid = (rng[0] + rng[1]) / 2;
          parts = (function() {
            var _i, _results;
            _results = [];
            for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
              _results.push(0);
            }
            return _results;
          })();
          soFar = 0;
          pickNext = function(i) {
            var endMax, endMin, iMax, iMid, iMin, nextPart;
            if (i === n - 1) {
              iMid = rngMid * n - soFar;
              iMin = Math.max(rng[0], Math.floor(iMid - 0.5));
              iMax = Math.min(rng[1], Math.ceil(iMid + 0.5));
              nextPart = randomInt(iMin, iMax);
            } else {
              while (true) {
                nextPart = randomInt(rng[0], rng[1]);
                endMin = (soFar + nextPart + rng[0] * (n - i - 1)) / n;
                endMax = (soFar + nextPart + rng[1] * (n - i - 1)) / n;
                if (endMin <= rngMid && rngMid <= endMax) {
                  break;
                }
              }
            }
            soFar += nextPart;
            return nextPart;
          };
          for (i = _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            parts[i] = pickNext(i);
          }
          randomize(parts);
          return parts;
        };

        MWClassGameConstruct.prototype.difficultyColor = function(d, dMin, dMax) {
          if (dMin == null) {
            dMin = 0;
          }
          if (dMax == null) {
            dMax = 0.4;
          }
          return this.root.color.blend('difficulty', (d - dMin) / dMax);
        };

        MWClassGameConstruct.prototype.create = function(param) {
          var target;
          target = this.root.show.ConstructFigure(param.d, {
            color: this.color(),
            show: false
          });
          param.parts = target._idx;
          return target;
        };

        MWClassGameConstruct.prototype.prompt = function(target) {
          return this.root.show.ConstructPrompt(target, {
            show: false
          });
        };

        MWClassGameConstruct.prototype.tutorialIntro1 = function() {
          var str;
          str = 'In these trials you will mentally\nconstruct four parts into a figure.';
          return (function(_this) {
            return function(s, idx) {
              return _this.root.show.Instructions(str);
            };
          })(this);
        };

        MWClassGameConstruct.prototype.tutorialIntro2 = function() {
          return (function(_this) {
            return function(s, idx) {
              var arrow, figure, pad, parts, stim, text, _i;
              pad = 10;
              figure = _this.create(_this.getTrialParam());
              parts = _this.prompt(figure);
              parts.attr('t', pad);
              figure.attr('t', _this.root.height() - figure.attr('height') - pad);
              text = _this.root.show.Instructions('Construct the parts in this order.', {
                color: 'gray'
              });
              arrow = _this.root.show.Text("↓", {
                t: (figure.attr('t') + parts.attr('t')) / 2,
                "font-size": 72
              });
              stim = [parts, figure, text, arrow];
              for (idx = _i = 0; _i <= 3; idx = ++_i) {
                stim.push(_this.root.show.Text(idx + 1, {
                  "font-size": 32,
                  x: parts.element[idx].attr('x'),
                  y: parts.element[idx].attr('y')
                }));
                stim.push(_this.root.show.Text(idx + 1, {
                  "font-size": 32,
                  x: figure.element[idx].attr('x'),
                  y: figure.element[idx].attr('y')
                }));
              }
              return stim;
            };
          })(this);
        };

        return MWClassGameConstruct;

      })(MWClassGameBase);

      MWClassGame.prototype.Assemblage = function() {
        return new MWClassGameAssemblage(this.root);
      };

      MWClassGame.prototype.MWClassGameAssemblage = MWClassGameAssemblage = (function(_super1) {
        __extends(MWClassGameAssemblage, _super1);

        MWClassGameAssemblage.prototype.tPerPromptWord = 300;

        MWClassGameAssemblage.prototype.tImagine = 500;

        MWClassGameAssemblage.prototype.skillInit = 3;

        MWClassGameAssemblage.prototype.skillStep = 1;

        MWClassGameAssemblage.prototype.skillMin = 1;

        MWClassGameAssemblage.prototype.skillMax = 100;

        MWClassGameAssemblage.prototype.skillName = 'steps';

        MWClassGameAssemblage.prototype._map = null;

        MWClassGameAssemblage.prototype._param = null;

        MWClassGameAssemblage.prototype._doOperate = false;

        function MWClassGameAssemblage(root) {
          MWClassGameAssemblage.__super__.constructor.call(this, root, 'assemblage');
          this._map = {};
          this._param = [];
          this.addPart('square', [['L', 0, 1], ['L', 1, 1], ['L', 1, 0], ['Z']], {
            symmetry: '90',
            inside: true
          });
          this.addPart('circle', [['M', 0, 0.5], ['C', 0, 0.5, 0, 1, 0.5, 1], ['C', 0.5, 1, 1, 1, 1, 0.5], ['C', 1, 0.5, 1, 0, 0.5, 0], ['C', 0.5, 0, 0, 0, 0, 0.5]], {
            symmetry: '90',
            inside: true
          });
          this.addPart('triangle', [['M', 0, 1], ['L', 0.5, 0], ['L', 1, 1], ['Z']], {
            symmetry: 'vertical',
            connects: [1, 3]
          });
          this.addPart('diamond', [['M', 0.5, 0], ['L', 0, 0.5], ['L', 0.5, 1], ['L', 1, 0.5], ['Z']], {
            symmetry: '90'
          });
          this.addPart('line', [['M', 0.5, 0], ['L', 0.5, 1], ['M', 1, 1]], {
            symmetry: '180',
            connects: [1, 3]
          });
          this.addPart('cross', [['M', 0.5, 0], ['L', 0.5, 1], ['M', 0, 0.5], ['L', 1, 0.5]], {
            symmetry: '90'
          });
        }

        MWClassGameAssemblage.prototype.param = function(part) {
          return this._param[this._map[part]];
        };

        MWClassGameAssemblage.prototype.parts = function(iMax) {
          var i, p, _i, _len, _ref, _results;
          if (iMax == null) {
            iMax = null;
          }
          _ref = this._param;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            p = _ref[i];
            if ((iMax == null) || i <= iMax) {
              _results.push(p.name);
            }
          }
          return _results;
        };

        MWClassGameAssemblage.prototype.addPart = function(name, definition, options) {
          var _ref, _ref1, _ref2;
          if (options == null) {
            options = {};
          }
          options.name = name;
          options.definition = definition;
          options.connects = (_ref = options.connects) != null ? _ref : [0, 1, 2, 3];
          options.symmetry = (_ref1 = options.symmetry) != null ? _ref1 : 'none';
          options.inside = (_ref2 = options.inside) != null ? _ref2 : false;
          return this._map[name] = this._param.push(options) - 1;
        };

        MWClassGameAssemblage.prototype.getTrialParam = function(param, skill) {
          var _ref;
          if (param == null) {
            param = {};
          }
          if (skill == null) {
            skill = null;
          }
          param = MWClassGameAssemblage.__super__.getTrialParam.call(this, param, skill);
          param.imax = (_ref = param.imax) != null ? _ref : null;
          return param;
        };

        MWClassGameAssemblage.prototype.create = function(param) {
          var iStep, target;
          target = this.root.show.Assemblage({
            color: this.color(),
            imax: param.imax,
            show: false
          });
          target.addRandom();
          iStep = 1;
          while (iStep < param.steps) {
            target.addRandom();
            iStep++;
            if (iStep < param.steps) {
              target.rotate(randomInt(1, 3));
              iStep++;
            }
          }
          param.steps = target._history;
          param.set = target.getSet();
          param.rotation = target._rotation;
          return target;
        };

        MWClassGameAssemblage.prototype.prompt = function(target) {
          return this.root.show.AssemblageInstruction(target, null, {
            show: false
          });
        };

        MWClassGameAssemblage.prototype.promptTime = function(target, step) {
          var instruct, nImagine, nWord, tImagine, tWord;
          if (step == null) {
            step = null;
          }
          instruct = target._instruction;
          nWord = wordCount(step != null ? instruct[step] : instruct.join(' '));
          tWord = nWord * this.tPerPromptWord;
          nImagine = step != null ? 1 : target.numSteps();
          tImagine = nImagine * this.tImagine;
          return tWord + tImagine;
        };

        MWClassGameAssemblage.prototype.promptNext = function() {
          var fPromptTimeout, that;
          that = this;
          fPromptTimeout = function(s) {
            return that.promptTime(s.pre.target);
          };
          return ['lazy', fPromptTimeout];
        };

        MWClassGameAssemblage.prototype.tutorialIntro1 = function() {
          var str;
          str = 'In these trials you will mentally\nconstruct assemblages from verbal descriptions.';
          return (function(_this) {
            return function(s, idx) {
              return _this.root.show.Instructions(str);
            };
          })(this);
        };

        MWClassGameAssemblage.prototype.tutorialIntro2 = function() {
          return (function(_this) {
            return function(s, idx) {
              var arrow, assemblage, instruct, pad;
              pad = 20;
              assemblage = _this.create(_this.getTrialParam());
              instruct = _this.prompt(assemblage);
              instruct.attr('l', pad);
              assemblage.attr('l', _this.root.width() - assemblage.attr('width') - pad);
              arrow = _this.root.show.Text("→", {
                l: (instruct.attr('l') + instruct.attr('width') + assemblage.attr('l')) / 2,
                "font-size": 72
              });
              return [instruct, assemblage, arrow];
            };
          })(this);
        };

        return MWClassGameAssemblage;

      })(MWClassGameBase);

      MWClassGame.prototype.Rotate = function() {
        return new MWClassGameRotate(this.root);
      };

      MWClassGame.prototype.MWClassGameRotate = MWClassGameRotate = (function(_super1) {
        __extends(MWClassGameRotate, _super1);

        MWClassGameRotate.prototype.nDistractor = 1;

        MWClassGameRotate.prototype.path = window._rotate_paths;

        MWClassGameRotate.prototype.skillInit = 45;

        MWClassGameRotate.prototype.skillStep = 1;

        MWClassGameRotate.prototype.skillMin = 0;

        MWClassGameRotate.prototype.skillMax = 89;

        MWClassGameRotate.prototype.skillName = 'precision';

        MWClassGameRotate.prototype.tOperate = 4000;

        function MWClassGameRotate(root) {
          MWClassGameRotate.__super__.constructor.call(this, root, 'rotate');
        }

        MWClassGameRotate.prototype.getTrialParam = function(param, skill) {
          if (param == null) {
            param = {};
          }
          if (skill == null) {
            skill = null;
          }
          param = MWClassGameRotate.__super__.getTrialParam.call(this, param, skill);
          param.shape = randomInt(0, this.path.length - 1);
          return param;
        };

        MWClassGameRotate.prototype.create = function(param) {
          var target;
          target = this.root.show.RotateStimulus(param.shape, {
            color: this.color(),
            precision: 90 - param.precision,
            show: false
          });
          param.orientation = target._path._param.orientation;
          param.initialOrientation = target._initialOrientation;
          return target;
        };

        MWClassGameRotate.prototype.prompt = function(target) {
          var h, initial, instruction, y, yInstruct;
          initial = target.createPrompt();
          y = initial.attr("y");
          h = initial.rotatedHeight();
          yInstruct = y + h / 2 + 36;
          instruction = this.root.show.Instructions(target.operation(), {
            y: yInstruct
          });
          return [initial, instruction];
        };

        MWClassGameRotate.prototype.tutorialIntro1 = function() {
          var str;
          str = 'In these trials you will\nmentally rotate shapes.';
          return (function(_this) {
            return function(s, idx) {
              return _this.root.show.Instructions(str);
            };
          })(this);
        };

        MWClassGameRotate.prototype.tutorialIntro2 = function() {
          return (function(_this) {
            return function(s, idx) {
              var arrow, pad, prompt, target;
              pad = 20;
              target = _this.create(_this.getTrialParam());
              prompt = _this.prompt(target);
              prompt[0].attr('l', pad);
              prompt[1].attr('x', prompt[0].attr('x'));
              target.attr('l', _this.root.width() - target.rotatedWidth() - pad);
              arrow = _this.root.show.Text("→", {
                l: (prompt[0].attr('l') + prompt[0].rotatedWidth() + target.attr('l')) / 2,
                "font-size": 72
              });
              return [prompt[0], prompt[1], target, arrow];
            };
          })(this);
        };

        return MWClassGameRotate;

      })(MWClassGameBase);

      return MWClassGame;

    })(MWClass);

    MWLearn.prototype.Session = function() {
      return new MWClassSession(this);
    };

    MWLearn.prototype.MWClassSession = MWClassSession = (function(_super) {
      __extends(MWClassSession, _super);

      MWClassSession.prototype.timer = null;

      MWClassSession.prototype.sessions_finished = null;

      MWClassSession.prototype.trialsPerBlock = 10;

      MWClassSession.prototype._started = false;

      MWClassSession.prototype._blockType = null;

      MWClassSession.prototype._trialsLeftInBlock = 0;

      function MWClassSession(root) {
        MWClassSession.__super__.constructor.call(this, root);
        this.timer = objPath(this, 'root', 'el', 'status', 'el', 'timer');
        this.sessions_finished = this.root.data.Variable("sessions_finished", 0);
      }

      MWClassSession.prototype.stopTimer = function() {
        if (this.timer != null) {
          return this.timer.stop();
        }
      };

      MWClassSession.prototype.startTimer = function() {
        if (this.timer != null) {
          return this.timer.go();
        }
      };

      MWClassSession.prototype.remaining = function() {
        if (this.timer != null) {
          return this.timer.remaining();
        } else {
          return null;
        }
      };

      MWClassSession.prototype.currentSession = function() {
        return this.sessions_finished.get() + 1;
      };

      MWClassSession.prototype.nextSessionTime = function() {
        if (this.timer != null) {
          return this.timer.nextReset();
        } else {
          return null;
        }
      };

      MWClassSession.prototype.run = function() {
        if (!this._started) {
          if (this.remaining() === 0) {
            return this.abort('toosoon');
          } else {
            return this.start();
          }
        } else if (this.remaining() > 0) {
          return this.step();
        } else {
          return this.finish();
        }
      };

      MWClassSession.prototype.step = function() {
        var game, games, idx, minTF, possibleBlocks, trialsFinished;
        if (this._trialsLeftInBlock === 0) {
          this._trialsLeftInBlock = this.trialsPerBlock;
          games = this.root.game.gameNames;
          trialsFinished = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = games.length; _i < _len; _i++) {
              game = games[_i];
              _results.push(this.root.game[game].trials_finished.get());
            }
            return _results;
          }).call(this);
          minTF = Math.min.apply(Math, trialsFinished);
          possibleBlocks = (function() {
            var _i, _len, _results;
            _results = [];
            for (idx = _i = 0, _len = games.length; _i < _len; idx = ++_i) {
              game = games[idx];
              if (trialsFinished[idx] === minTF) {
                _results.push(game);
              }
            }
            return _results;
          })();
          this._blockType = pickFrom(possibleBlocks);
          return this.root.action.dialog("You will now begin a block of " + (capitalize(this._blockType)) + " trials.", {
            type: 'ok',
            callback: (function(_this) {
              return function() {
                return _this.step();
              };
            })(this)
          });
        } else {
          this._trialsLeftInBlock--;
          return mwl.game[this._blockType].trial(null, {
            callback: (function(_this) {
              return function(shw) {
                return _this.run();
              };
            })(this)
          });
        }
      };

      MWClassSession.prototype.start = function() {
        this._started = true;
        return this.base.action.dialog("Hi, " + (capitalize(this.base.user_greeting)) + "! Welcome to Session " + (this.currentSession()) + "!\n \nSee the menu on the left if you need help.\n \nThe timer in the upper left shows how much\ntime is remaining in the session.", {
          type: 'ok',
          callback: (function(_this) {
            return function() {
              return _this.run();
            };
          })(this)
        });
      };

      MWClassSession.prototype.finish = function() {
        this.sessions_finished.set(this.sessions_finished.get() + 1);
        return this.base.action.dialog("Session " + (this.currentSession() - 1) + " finished!\nYou will now be logged out.", {
          type: 'ok',
          callback: (function(_this) {
            return function() {
              return _this.base.action.logout();
            };
          })(this)
        });
      };

      MWClassSession.prototype.abort = function(reason) {
        var prompt, t;
        prompt = (function() {
          switch (reason) {
            case 'toosoon':
              t = new Date(this.nextSessionTime());
              return "Please wait until\n" + (t.toLocaleDateString()) + " at " + (t.toLocaleTimeString()) + "\nto start session " + (this.currentSession()) + ".";
            default:
              throw 'Invalid abort reason';
          }
        }).call(this);
        return this.base.action.dialog("" + prompt + "\nYou will now be logged out.", {
          type: 'ok',
          callback: (function(_this) {
            return function() {
              return _this.base.action.logout();
            };
          })(this)
        });
      };

      return MWClassSession;

    })(MWClass);

    return MWLearn;

  })();

}).call(this);
