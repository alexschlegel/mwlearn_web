fTestNaturalDirection = (mwl) ->
  fTest = (a) -> "#{a}: #{naturalDirection(a)}"
  alert fTest(a) for a in [0,90,180,270,-90,45,-45,360]

fTestStimulus = (mwl) ->
  el = mwl.show.Rectangle()
  el.attr "x", -100

  alert '1'

  el.attr "width", 50

fTestCompoundStimulus = (mwl) ->
  x = mwl.show.Rectangle
    x: -100
  y = mwl.show.Circle
    x: 100

  z = mwl.show.CompoundStimulus [x,y],
    background: "red"
    element_mousedown: (el,x,y) -> alert getClass(el)

  z.attr "y", 100
  z.attr "height", 300

  alert '1'
  z.show(false)
  alert '2'
  z.show(true)

fTestStimulusGrid = (mwl) ->
  #x = (mwl.show.Circle({color: mwl.color.pick()}) for [1..97])
  y = mwl.show.StimulusGrid []

  f = => y.addElement mwl.show.Circle({color: mwl.color.pick()})

  n = 100
  fStep = (f for [1..n])
  next = (100 for [1..n])

  mwl.exec.Sequence 'stimulusgrid', fStep, next


fTestShowPath = (mwl) ->
  path = [['M',.692,.607],['C',.694,.6,.7,.591,.704,.586,.707,.581,.714,.571,.718,.564,.723,.554,.727,.549,.735,.542,.742,.535,.745,.532,.746,.527,.748,.516,.763,.48,.77,.466,.786,.435,.804,.407,.811,.4,.819,.393,.82,.393,.83,.403],['L',.836,.41,.83,.419],['C',.825,.428,.823,.439,.825,.448,.827,.455,.831,.454,.837,.444,.847,.426,.859,.411,.877,.39,.887,.379,.896,.368,.898,.366,.9,.363,.9,.337,.898,.314,.897,.308,.898,.298,.9,.291,.906,.263,.905,.235,.894,.201,.887,.18,.878,.164,.862,.146],['L',.862,.146],['C',.849,.132,.845,.129,.83,.128,.822,.127,.821,.127,.817,.121,.812,.114,.812,.114,.809,.117,.806,.12,.803,.119,.798,.116,.791,.113,.789,.113,.787,.117,.786,.122,.782,.121,.778,.114,.776,.111,.768,.1,.759,.089,.751,.077,.741,.065,.738,.06,.731,.051,.729,.051,.717,.057,.71,.06,.709,.061,.709,.064,.71,.067,.709,.067,.704,.067,.7,.068,.697,.069,.693,.073,.69,.075,.685,.079,.682,.081,.665,.091,.659,.101,.657,.119,.655,.135,.649,.163,.646,.165,.644,.168,.646,.192,.649,.196,.654,.201,.657,.216,.655,.231,.654,.244,.653,.25,.646,.264,.639,.28,.638,.281,.626,.292,.614,.304,.61,.306,.567,.328,.542,.341,.517,.355,.512,.358,.502,.364,.501,.365,.486,.365,.448,.367,.426,.373,.402,.39,.392,.397,.389,.4,.385,.406,.383,.41,.377,.417,.372,.422,.363,.43,.362,.43,.35,.432,.335,.434,.32,.433,.315,.431,.311,.429,.309,.429,.307,.432,.305,.434,.301,.436,.299,.436],['S',.285,.444,.272,.452],['L',.248,.466,.226,.468],['C',.208,.47,.203,.471,.201,.474,.2,.476,.192,.482,.183,.489,.165,.503,.162,.508,.153,.532,.15,.542,.146,.55,.143,.552,.141,.554,.139,.558,.138,.561,.136,.565,.134,.568,.127,.573,.119,.579,.118,.581,.114,.591,.111,.597,.108,.604,.107,.606,.105,.61,.088,.623,.071,.635],['L',.063,.641,.069,.648],['C',.073,.652,.075,.656,.075,.658,.074,.664,.079,.672,.091,.68,.103,.689,.111,.691,.121,.69,.126,.689,.128,.69,.132,.694,.136,.698,.136,.701,.136,.706],['L',.136,.713,.112,.732,.089,.752,.09,.759],['C',.09,.762,.09,.769,.091,.774,.091,.782,.091,.782,.102,.795,.109,.803,.114,.809,.114,.81,.114,.812,.115,.813,.122,.817,.126,.82,.128,.82,.13,.818,.132,.816,.137,.815,.141,.815,.148,.815,.15,.814,.155,.808,.16,.802,.166,.789,.169,.778,.17,.773,.171,.771,.176,.768,.18,.765,.181,.764,.18,.761,.178,.754,.187,.735,.196,.729,.2,.727,.204,.726,.214,.727,.227,.728,.228,.728,.234,.734,.239,.74,.241,.741,.246,.741,.254,.74,.26,.748,.259,.757,.259,.761,.259,.765,.26,.767,.263,.773,.266,.793,.265,.803,.264,.811,.264,.812,.273,.824,.285,.84,.286,.848,.281,.858,.278,.862,.275,.867,.273,.869,.27,.872,.27,.873,.273,.882,.274,.887,.277,.892,.279,.893,.281,.895,.283,.899,.284,.903,.287,.911,.293,.918,.305,.926,.315,.932,.315,.932,.323,.928,.33,.924,.331,.924,.337,.914,.341,.908,.346,.9,.35,.896,.354,.891,.356,.887,.355,.886,.354,.885,.355,.883,.37,.864,.378,.854,.385,.847,.392,.842,.398,.837,.41,.826,.42,.817,.44,.798,.477,.773,.497,.763,.51,.757,.547,.734,.577,.713,.592,.702,.594,.701,.606,.699,.64,.691,.665,.664,.692,.607],['Z'],['M',.825,.19],['C',.824,.19,.822,.188,.821,.187,.819,.185,.817,.183,.816,.18,.816,.178,.816,.176,.817,.175,.818,.173,.821,.172,.824,.173,.826,.174,.828,.176,.828,.178,.829,.18,.828,.182,.828,.184,.827,.186,.827,.189,.825,.19],['Z'],['M',.49,.683,.494,.684,.494,.686,.485,.697,.477,.707,.471,.711,.456,.725,.47,.709,.472,.708,.472,.702,.475,.698,.478,.693,.481,.686,.49,.683],['Z'],['M',.394,.776,.38,.782,.369,.79,.361,.798,.353,.805,.348,.806,.341,.809,.334,.813,.328,.806,.325,.791,.322,.777,.324,.765,.325,.76,.33,.753,.336,.752,.342,.757,.35,.762,.36,.761,.367,.762,.378,.767,.387,.767,.394,.769,.408,.767,.408,.767,.409,.77,.407,.773,.394,.776],['Z']]
  #path = [['M',.71,.437],['C',.707,.43,.704,.42,.703,.414,.702,.408,.699,.397,.696,.389,.693,.378,.692,.372,.692,.362,.692,.351,.691,.347,.688,.343,.682,.334,.665,.299,.66,.284,.647,.251,.639,.219,.639,.21,.639,.199,.64,.198,.653,.198],['L',.662,.198,.665,.207],['C',.668,.217,.675,.227,.684,.231,.69,.234,.692,.231,.688,.219,.682,.2,.679,.181,.676,.154,.674,.139,.673,.125,.672,.122,.671,.118,.652,.101,.634,.087,.629,.083,.622,.076,.618,.07,.602,.047,.58,.029,.548,.013,.528,.004,.509,0,.486,0],['L',.486,0],['C',.466,0,.462,.001,.451,.011,.445,.016,.444,.017,.437,.016,.429,.015,.429,.015,.429,.019,.429,.023,.426,.025,.42,.027,.413,.029,.412,.031,.414,.035,.416,.04,.413,.042,.405,.04,.402,.04,.388,.038,.374,.037,.36,.036,.344,.034,.339,.034,.328,.032,.326,.034,.322,.047,.32,.054,.32,.055,.322,.057,.324,.059,.324,.059,.321,.063,.319,.066,.318,.07,.318,.075,.318,.079,.317,.085,.316,.089,.312,.107,.315,.119,.327,.133,.338,.146,.354,.169,.354,.172,.354,.175,.374,.19,.379,.19,.386,.19,.398,.198,.409,.21,.418,.219,.421,.224,.427,.238,.434,.255,.434,.256,.434,.273,.434,.289,.433,.293,.421,.34,.413,.367,.406,.395,.405,.401,.404,.412,.403,.414,.393,.425,.369,.454,.359,.475,.355,.504,.353,.516,.353,.52,.355,.527,.356,.532,.357,.541,.357,.548,.357,.559,.357,.56,.351,.57,.342,.583,.332,.593,.326,.596,.322,.597,.321,.599,.321,.602,.321,.605,.32,.609,.319,.611],['S',.315,.627,.312,.641],['L',.306,.668,.293,.687],['C',.283,.701,.28,.706,.281,.709,.281,.711,.281,.721,.28,.732,.278,.755,.279,.76,.291,.783,.296,.793,.299,.801,.299,.804,.299,.807,.301,.812,.302,.814,.304,.818,.304,.822,.304,.83,.303,.84,.303,.842,.308,.852,.311,.858,.314,.865,.314,.867,.316,.871,.314,.893,.312,.914],['L',.311,.923,.32,.923],['C',.326,.923,.33,.924,.331,.926,.335,.931,.344,.932,.358,.929,.373,.926,.38,.922,.385,.914,.389,.909,.39,.908,.396,.908,.402,.908,.404,.909,.408,.913],['L',.412,.918,.411,.949,.41,.979,.415,.983],['C',.418,.985,.423,.989,.427,.993,.433,.998,.434,.998,.451,.999,.461,.999,.469,.999,.469,1,.471,1.001,.473,1.001,.48,.999,.485,.998,.486,.996,.486,.993,.486,.991,.489,.986,.492,.983,.496,.978,.497,.977,.496,.969,.495,.96,.489,.947,.483,.938,.48,.934,.48,.931,.48,.926,.481,.921,.481,.92,.478,.918,.471,.915,.464,.896,.465,.885,.466,.881,.468,.877,.476,.87,.485,.861,.486,.86,.495,.86,.503,.86,.505,.86,.508,.856,.513,.85,.523,.85,.529,.857,.531,.86,.535,.862,.537,.863,.543,.865,.56,.877,.566,.884,.572,.89,.572,.89,.587,.892,.607,.895,.614,.898,.617,.909,.619,.914,.62,.92,.62,.923,.62,.927,.621,.928,.63,.931,.634,.933,.64,.935,.642,.935,.644,.934,.649,.936,.653,.937,.661,.941,.671,.941,.684,.937,.695,.934,.695,.934,.698,.926,.7,.918,.7,.917,.697,.906,.695,.899,.693,.889,.692,.884,.692,.877,.69,.874,.689,.874,.687,.874,.686,.872,.682,.848,.681,.836,.68,.826,.681,.817,.681,.809,.682,.793,.682,.779,.682,.752,.687,.708,.694,.686,.698,.672,.706,.629,.711,.593,.713,.575,.714,.572,.72,.562,.738,.532,.735,.495,.71,.437],['Z'],['M',.493,.057],['C',.493,.058,.49,.058,.488,.058,.485,.058,.482,.058,.48,.057,.478,.056,.476,.054,.476,.052,.476,.05,.478,.048,.48,.046,.482,.045,.485,.045,.487,.046,.488,.047,.489,.049,.49,.051,.491,.053,.494,.055,.493,.057],['Z'],['M',.63,.637,.633,.635,.635,.636,.637,.65,.639,.662,.638,.67,.638,.69,.636,.669,.636,.667,.632,.663,.631,.658,.629,.653,.626,.646,.63,.637],['Z'],['M',.634,.771,.628,.785,.627,.798,.627,.81,.628,.821,.624,.825,.623,.832,.62,.84,.612,.839,.598,.832,.586,.824,.578,.815,.575,.811,.573,.802,.577,.797,.585,.796,.594,.794,.6,.785,.606,.781,.616,.776,.623,.77,.628,.766,.637,.755,.637,.755,.639,.755,.64,.759,.634,.771],['Z']]
  #path = mwl.game.rotate.path[52]
  x = mwl.show.Path path,
    color: 'blue'
    width: 400
    height: 400

  #x = mwl.paper.path "m206.59 35.942c0.22 8.532 6.5 13.352 10.9 20 5.31 8.032 8.86 18.293 9.05 28 0.41 20.738-9.48 40.948-15.84 59.998-1.49 4.45-0.07 8.56-0.79 13-1.74 10.64-5.48 20.05-6.23 31-1.8 26.27 7.82 52.08 6.87 78-0.52 14.02-13.48 23.35-10.73 39 2.08 11.84 16.34 20.93 16.77 32 13.24 16.15 3.08 36.53 3.08 55 0 11.65 1.26 23.36 0.54 35-0.44 7.12-3.7 14.03-5.1 21-2.1 10.4-2.42 21.55-4.25 32-1.01 5.72 1.17 11.33 0.43 17-1.15 8.81-5.46 14.86-7.91 23-2.25 7.48-2.2 15.59-4.36 23-1.53 5.27-7.02 11.66-11.47 14.76-3.84 2.67-10.59 5.5-10.18 11.23 0.55 7.82 10.51 4.49 15.22 3.85 11.39-1.54 18.02-17.53 23.21-26.84 5.94-10.66 4.19-19.45 5.91-31 1.07-7.17 5.29-13.67 6.44-21 0.98-6.17-0.74-12.92 0.76-18.96 0.84-3.42 3.83-5.78 5.12-9.05 3.34-8.48 6.17-19.9 6.56-28.99h1c1 19.8 6.01 37.74 9.22 57 1.8 10.75 0.68 22.11 0.78 33 0.05 4.86 1.91 9.35-0.28 14-1.96 4.19-4.27 11.33-7.22 14.75-2.94 3.42-9.11 2.89-10.16 8.22-0.72 3.62 3.7 5.84 6.66 6.31 6.03 0.96 19.29 1.17 21.09-6.28 0.76-3.18-2.07-4.6-2.03-7.39 0.08-5.67 7.17-11.25 7.86-17.61 2.27-20.9-4.73-42.34-6.83-63-1.31-12.85 2.58-25.5 1.88-38-0.56-10.13-2.36-20.32-3.13-30.39-0.22-2.81 1.37-9.69-1.84-9.61l1-24c13.81 2.68 25.93 4.07 40 4 3.8-0.02 12.29-2.91 15.27-0.3 4.68 4.07 2.91 13.19 6.53 18.21 8.83 12.22 12.4 23.53 18.51 37.09 2.87 6.36 8.26 13.11 9.46 20 4.53 25.81-7.35 52.35-19.69 74-6.15 10.81-6.84 23.48-19.08 30-2.14 7.65-20.31 10.94-17.37 18.89 2.14 5.81 9.14 3.42 13.37 2.14 10.57-3.22 24.13-9.12 29.03-20.03 2-4.44 1.86-9.46 3.57-14 5.06-13.45 11.54-26.21 17.96-39 6.7-13.36 17.25-24.45 19.16-40 1.55-12.65-6.72-21.61-6.72-34h1c4.55 9.75 12.62 16.14 16.15 27 2.85 8.73 0.51 17.16 0.89 26 0.91 20.88 5.29 50.78-7.74 68.96-4.36 6.09-12.41 7.03-18.3 11.04v1c12.6 16.94 42.38-1.22 40.89-20-2.61-33.04 7.6-66.98 3.94-101-1.09-10.11-8.84-11.42-12.22-19.21-8.04-18.47-5.65-35.3-2.82-54.79 1.28-8.76-0.32-17.52 5.21-25 2.8 20.77 5.3 42.18 8.3 63 2.08 14.42 6.31 29.37 6.69 44 0.23 8.82 1.78 16.37 3.3 25 0.55 3.12 1.68 8.15 5.71 8.25 6.98 0.18 5.56-10.16 5.17-14.25-1.01-10.64 4.31-40-9.17-44 0-8.12-3.35-15.03-3.91-23-1.96-28-1.53-65.85-23.6-86.87-11.75-11.19-28.1-20.34-42.49-27.87-6.55-3.42-15.55-5.32-21-10.26-2.45 0.49-6.72-0.12-6-3-5.16-1.39-9.16-7.33-13-10.91-16.43-15.31-21.5-36.9-31.58-56.01-3.1-5.87-10.92-6.65-13.56-13.08-2.58-6.29-0.16-14.35-1.32-21-1.51-8.64-1.66-17.27-2.71-26-0.34-2.86-2.26-6.49-0.83-9-5.72-14.66 2.85-38.59 3.91-53.998 0.43-6.191-0.22-14.007 5.42-18.258 7.61-5.733 31.99 4.686 34.3-8.753 1.43-8.365-19.34-7.666-22.63-16.989 5.79-0.533 14.82-10.596 6.85-14.954-7.28-3.981-14.66 9.281-22.84 7.265-5.62-1.384-7.78-7.077-13.01-9.164-8.84-3.524-19.02-1.251-28-4.252-8.92-2.98-16.58-10.692-26-11.707-6.87-0.7395-16.74 6.113-11.39 13.628 4.89 6.876 16.43 11.483 24.39 13.184z"
  #x = mwl.paper.path "M206.59 35.942 C206.81 44.474 213.09 49.294 217.49 55.942 C222.8 63.974 226.35 74.235 226.54 83.942 C226.95 104.68 217.06 124.89 210.7 143.94 C209.21 148.39 210.63 152.5 209.91 156.94 C208.17 167.58 204.43 176.99 203.68 187.94 C201.88 214.21 211.5 240.02 210.55 265.94 C210.03 279.96 197.07 289.29 199.82 304.94 C201.9 316.78 216.16 325.87 216.59 336.94 C229.83 353.09 219.67 373.47 219.67 391.94 C219.67 403.59 220.93 415.3 220.21 426.94 C219.77 434.06 216.51 440.97 215.11 447.94 C213.01 458.34 212.69 469.49 210.86 479.94 C209.85 485.66 212.03 491.27 211.29 496.94 C210.14 505.75 205.83 511.8 203.38 519.94 C201.13 527.42 201.18 535.53 199.02 542.94 C197.49 548.21 192 554.6 187.55 557.7 C183.71 560.37 176.96 563.2 177.37 568.93 C177.92 576.75 187.88 573.42 192.59 572.78 C203.98 571.24 210.61 555.25 215.8 545.94 C221.74 535.28 219.99 526.49 221.71 514.94 C222.78 507.77 227 501.27 228.15 493.94 C229.13 487.77 227.41 481.02 228.91 474.98 C229.75 471.56 232.74 469.2 234.03 465.93 C237.37 457.45 240.2 446.03 240.59 436.94 L241.59 436.94 C242.59 456.74 247.6 474.68 250.81 493.94 C252.61 504.69 251.49 516.05 251.59 526.94 C251.64 531.8 253.5 536.29 251.31 540.94 C249.35 545.13 247.04 552.27 244.09 555.69 C241.15 559.11 234.98 558.58 233.93 563.91 C233.21 567.53 237.63 569.75 240.59 570.22 C246.62 571.18 259.88 571.39 261.68 563.94 C262.44 560.76 259.61 559.34 259.65 556.55 C259.73 550.88 266.82 545.3 267.51 538.94 C269.78 518.04 262.78 496.6 260.68 475.94 C259.37 463.09 263.26 450.44 262.56 437.94 C262 427.81 260.2 417.62 259.43 407.55 C259.21 404.74 260.8 397.86 257.59 397.94 L258.59 373.94 C272.4 376.62 284.52 378.01 298.59 377.94 C302.39 377.92 310.88 375.03 313.86 377.64 C318.54 381.71 316.77 390.83 320.39 395.85 C329.22 408.07 332.79 419.38 338.9 432.94 C341.77 439.3 347.16 446.05 348.36 452.94 C352.89 478.75 341.01 505.29 328.67 526.94 C322.52 537.75 321.83 550.42 309.59 556.94 C307.45 564.59 289.28 567.88 292.22 575.83 C294.36 581.64 301.36 579.25 305.59 577.97 C316.16 574.75 329.72 568.85 334.62 557.94 C336.62 553.5 336.48 548.48 338.19 543.94 C343.25 530.49 349.73 517.73 356.15 504.94 C362.85 491.58 373.4 480.49 375.31 464.94 C376.86 452.29 368.59 443.33 368.59 430.94 L369.59 430.94 C374.14 440.69 382.21 447.08 385.74 457.94 C388.59 466.67 386.25 475.1 386.63 483.94 C387.54 504.82 391.92 534.72 378.89 552.9 C374.53 558.99 366.48 559.93 360.59 563.94 L360.59 564.94 C373.19 581.88 402.97 563.72 401.48 544.94 C398.87 511.9 409.08 477.96 405.42 443.94 C404.33 433.83 396.58 432.52 393.2 424.73 C385.16 406.26 387.55 389.43 390.38 369.94 C391.66 361.18 390.06 352.42 395.59 344.94 C398.39 365.71 400.89 387.12 403.89 407.94 C405.97 422.36 410.2 437.31 410.58 451.94 C410.81 460.76 412.36 468.31 413.88 476.94 C414.43 480.06 415.56 485.09 419.59 485.19 C426.57 485.37 425.15 475.03 424.76 470.94 C423.75 460.3 429.07 430.94 415.59 426.94 C415.59 418.82 412.24 411.91 411.68 403.94 C409.72 375.94 410.15 338.09 388.08 317.07 C376.33 305.88 359.98 296.73 345.59 289.2 C339.04 285.78 330.04 283.88 324.59 278.94 C322.14 279.43 317.87 278.82 318.59 275.94 C313.43 274.55 309.43 268.61 305.59 265.03 C289.16 249.72 284.09 228.13 274.01 209.02 C270.91 203.15 263.09 202.37 260.45 195.94 C257.87 189.65 260.29 181.59 259.13 174.94 C257.62 166.3 257.47 157.67 256.42 148.94 C256.08 146.08 254.16 142.45 255.59 139.94 C249.87 125.28 258.44 101.35 259.5 85.942 C259.93 79.751 259.28 71.935 264.92 67.684 C272.53 61.951 296.91 72.37 299.22 58.931 C300.65 50.566 279.88 51.265 276.59 41.942 C282.38 41.409 291.41 31.346 283.44 26.988 C276.16 23.007 268.78 36.269 260.6 34.253 C254.98 32.869 252.82 27.176 247.59 25.089 C238.75 21.565 228.57 23.838 219.59 20.837 C210.67 17.857 203.01 10.145 193.59 9.13000000000003 C186.72 8.39050000000003 176.85 15.243 182.2 22.758 C187.09 29.634 198.63 34.241 206.59 35.942 Z"
  #x = mwl.paper.path "M0.357440697614063 0.0621866186826306 C0.357821340207969 0.0769486305517587 0.368686956070384 0.0852881637455231 0.376299807948509 0.0967904908559268 C0.38548713601052 0.110687405920723 0.39162932332128 0.128440922539232 0.391958060106926 0.145235911898541 C0.392667439486479 0.181116666955032 0.375555824696784 0.216083879786148 0.364551793345675 0.249044068031213 C0.361973804868765 0.256743429589771 0.364430679793069 0.263854525321383 0.36318494039483 0.271536584943855 C0.360174403515753 0.289945844940049 0.353703479419347 0.306226966797585 0.352405834212848 0.325172586812464 C0.349291485717252 0.370624772912089 0.365935948232607 0.415281069951728 0.364292264304376 0.460127688288319 C0.36339256362787 0.4843850026818 0.340969254459574 0.500527709050643 0.345727286883402 0.527605239026247 C0.349326089589425 0.548090731352838 0.373998650448985 0.563818191255601 0.374742633700711 0.582971434503521 C0.397650397079433 0.610914061283457 0.380071630015399 0.646175407028046 0.380071630015399 0.678132082980085 C0.380071630015399 0.69828883852103 0.382251673962316 0.718549405678495 0.381005934564078 0.738688859283354 C0.380244649376265 0.751007837777047 0.374604218212018 0.762963475612921 0.372181947159887 0.775022925065315 C0.368548540581691 0.793016938595429 0.367994878626918 0.812308597332041 0.364828624323062 0.830389120542589 C0.36308112877831 0.840285827984151 0.3668529508452 0.849992214128761 0.365572607574788 0.85980241188989 C0.363582884924823 0.875045417582227 0.356125750471478 0.88551308891465 0.351886776130249 0.899596864889181 C0.347993840510753 0.912538713081994 0.348080350191186 0.926570583248266 0.34434313199647 0.939391317888472 C0.341695935775213 0.948509438206135 0.332197172863644 0.959565375365503 0.324497811305085 0.964928975552364 C0.317853867847812 0.969548592487499 0.306175060989325 0.974445040400021 0.306884440368877 0.98435904977767 C0.307836046853643 0.997889163797429 0.325068775195944 0.992127619080575 0.333217987092756 0.99102029517103 C0.352924892295448 0.988355797013686 0.364396075920896 0.960690001211136 0.373375780749866 0.944581898714466 C0.383653130785335 0.926138034846099 0.380625291970172 0.910929633025936 0.383601224977075 0.890945896845857 C0.385452532138346 0.87854040867173 0.392753949166912 0.867294150215409 0.394743671816876 0.854611831063896 C0.396439261553368 0.843936536498434 0.393463328546464 0.832257729639947 0.396058618959462 0.821807360243611 C0.39751198159074 0.815890098101978 0.402685260480648 0.811806841185529 0.404917210235825 0.806149108085195 C0.410696056888766 0.791477066283717 0.415592504801287 0.771718255272765 0.416267280308667 0.755990795370002 L0.417997473917331 0.755990795370002 C0.419727667525996 0.790248628821565 0.428395937505407 0.821288302161012 0.433949858989221 0.854611831063896 C0.437064207484818 0.873211412357043 0.435126390643113 0.892866411751475 0.435299410003979 0.911708220149835 C0.435385919684413 0.920116961087946 0.438604079796529 0.927885530390851 0.434814955793553 0.935930930671142 C0.43142377632057 0.943180441891448 0.427427029084555 0.955534024257314 0.422322957938993 0.961451286398948 C0.417236188729519 0.967368548540582 0.406560894164057 0.966451545927989 0.404744190874959 0.975673477862173 C0.40349845147672 0.981936778725539 0.411145907227019 0.985777808536775 0.416267280308667 0.986590999532848 C0.426700347768915 0.988251985397166 0.449642715019811 0.988615326054985 0.452757063515407 0.975725383670433 C0.454072010657993 0.970223367994879 0.449175562745471 0.967766493070574 0.449244770489818 0.9629392529024 C0.449383185978511 0.95312905514127 0.461650258663945 0.943474574804921 0.462844092253923 0.932470543453813 C0.466771631745592 0.896309497032718 0.454660276484939 0.859214146062944 0.451026869906743 0.82346834610793 C0.448760316279392 0.801235358236587 0.455490769417098 0.779348409086977 0.454279633891033 0.757720988978667 C0.45331072547018 0.740194127722892 0.450196376974584 0.722563454850598 0.448864127895912 0.705140405211343 C0.448483485302005 0.700278561170995 0.451234493139783 0.688374829143381 0.445680571655969 0.688513244632074 L0.447410765264633 0.646988598024119 C0.471304739000294 0.651625516895341 0.492274685537312 0.654030486011385 0.516618509611226 0.653909372458778 C0.523193245324152 0.653874768586605 0.537882589061716 0.648874509057563 0.543038566015537 0.653390314376179 C0.551135872104089 0.660432202363444 0.548073429416752 0.676211568074468 0.554336730280118 0.684897139989965 C0.569614339844629 0.706040105887849 0.575791131027562 0.725608595601848 0.586362613976504 0.749070020935343 C0.591328269633372 0.760074052286451 0.600654013184075 0.771752859144938 0.602730245514473 0.783673893108639 C0.610568022561725 0.828330190148278 0.590013322490787 0.874249528522242 0.568662733359863 0.911708220149835 C0.558022042666575 0.930411613059501 0.556828209076596 0.952333166081284 0.535650639306538 0.963614028409779 C0.531948024983996 0.976850009516065 0.500510407114556 0.982542346488572 0.505597176324031 0.996297385677457 C0.509299790646573 1.0063498105438 0.521411145907227 1.00221464781909 0.528729864871879 1 C0.547018011315466 0.994428776580099 0.570479436648961 0.984220634288977 0.578957385331419 0.965344222018444 C0.582417772548748 0.957662162395972 0.582175545443535 0.948976590480475 0.585134176514352 0.941121511497137 C0.593888956174196 0.917850407460595 0.605100610758344 0.895773137014032 0.616208453725972 0.873643960759209 C0.627800750904026 0.850528574147447 0.64605429347544 0.831340727027354 0.64935896326799 0.804436216412617 C0.65204076336142 0.782549267263007 0.637732062217762 0.76704673252937 0.637732062217762 0.745609633718013 L0.639462255826427 0.745609633718013 C0.647334636745852 0.762479021402495 0.661297299167777 0.773534958561863 0.667404882606364 0.792324861151963 C0.672335934391058 0.807429451355607 0.668287281346783 0.822014983476651 0.668944754918075 0.837309894977248 C0.67051923110196 0.873436337526169 0.678097479107912 0.925169126425247 0.65555305638701 0.956624046230773 C0.648009412253231 0.967160925307542 0.634081353703479 0.968787307299687 0.623890513348444 0.975725383670433 L0.623890513348444 0.977455577279097 C0.64569095281762 1.00676505700988 0.697216118483658 0.975344741076526 0.694638130006748 0.942851705105801 C0.690122324688133 0.885686108275516 0.7077876014326 0.826963337197432 0.701455092824887 0.768102150630656 C0.699569181791442 0.750609893247054 0.68616018132429 0.748343339619703 0.680312126927003 0.734865131408205 C0.666401370313338 0.702908455456166 0.670536533038047 0.673789297022337 0.675432980950568 0.64006782358946 C0.677647628769659 0.624911327577556 0.674879318995796 0.609754831565652 0.684447289651712 0.59681298337284 C0.689291831755973 0.632749104624807 0.693617315777635 0.669792549786321 0.69880789660363 0.705815180718722 C0.702406699309653 0.730764572555669 0.709725418274305 0.756630967005208 0.710382891845597 0.781943699499974 C0.71078083637559 0.797204007128398 0.713462636469021 0.810266968873817 0.716092530754191 0.825198539716594 C0.717044137238957 0.830596743775629 0.718999256016748 0.839299617627213 0.725971936259667 0.839472636988079 C0.738048687648148 0.839784071837639 0.735591812723844 0.821893869924044 0.734917037216464 0.814817378064605 C0.733169541671713 0.796408118068412 0.74237417166981 0.745609633718013 0.719051161825008 0.738688859283354 C0.719051161825008 0.724639687180996 0.713255013235981 0.712684049345122 0.712286104815129 0.698894406284063 C0.708894925342146 0.650448985241449 0.709638908593872 0.584961157153486 0.671453535650639 0.548592487499351 C0.651123760748828 0.529231621018392 0.622835095247158 0.513400349499109 0.597937609218471 0.500371991625863 C0.586604841081717 0.494454729484229 0.571033098603734 0.491167361627766 0.56160354343651 0.482620205200962 C0.557364569095282 0.483468000069208 0.549976642386283 0.482412581967922 0.551222381784521 0.477429624374968 C0.542294582763811 0.475024655258924 0.535373808329152 0.464747305223455 0.528729864871879 0.458553212104435 C0.500302783881516 0.432063947955776 0.491530702285586 0.394709067944703 0.474090350710244 0.361645068083119 C0.468726750523383 0.351488831600256 0.455196636503625 0.350139280585498 0.450628925376749 0.339014135681783 C0.446165025866394 0.328131217883281 0.450352094399363 0.314185857397443 0.448345069813312 0.302680069899822 C0.445732477464228 0.287731197120958 0.445472948422928 0.272799626278181 0.44365624513383 0.257695036074537 C0.443067979306884 0.252746682353755 0.439746007578248 0.246466079554302 0.442220184438639 0.242123293596553 C0.432323476997076 0.216758655293527 0.447151236223333 0.175355122238178 0.448985241448518 0.148696299115871 C0.449729224700244 0.137984670484627 0.448604598854612 0.124461477239303 0.458362890807481 0.117106424208869 C0.47152966416942 0.107187224250394 0.513711784348668 0.125214111459072 0.517708531584684 0.101962039552226 C0.520182708445075 0.0874889700157448 0.484246587193107 0.0886983753482015 0.4785542502206 0.0725677803346195 C0.488572071214769 0.0716455871412012 0.504195719501012 0.0542346488572072 0.490406076439954 0.0466944651106459 C0.477810266968874 0.0398065643545513 0.465041438136927 0.062752391992664 0.450888454418049 0.0592643216775958 C0.441164766337353 0.0568697337232037 0.437427548142637 0.0470197415090749 0.42837863556932 0.0434088274477915 C0.413083724068723 0.0373116251708567 0.395470353132515 0.0412443552433518 0.379933214526706 0.0360520442237487 C0.364499887537415 0.0308960672699276 0.351246604495043 0.0175528141599046 0.334948180701421 0.0157966676471098 C0.323061750609893 0.0145171894735021 0.305984739692372 0.0263733411768778 0.315241275498728 0.0393757461459938 C0.323701922245099 0.051272557399173 0.343668356489091 0.0592435593542918 0.357440697614063 0.0621866186826306 Z"
  #x.transform 's500t1,0.5'

fTestShowItemList = (mwl) ->
  items = {
    blah: 'it worked'
    bloo: 'or did it'
  }
  x = mwl.show.ItemList items

  x.add 'meow', 'new item!'

  alert 'here'

  x.remove 'bloo'

fTestConstruct = (mwl) ->
  n = 600
  x = []
  for i in [0..n-1]
    d = i/(n-1)
    x.push mwl.show.ConstructFigure d,
      color: mwl.game.construct.difficultyColor(d,0,1)

  y = mwl.show.StimulusGrid x,
    padding: 1

  ###R = 20; C = 30
  W = 600
  for i in [0..R-1]
    for j in [0..C-1]
      d = 1*( (i*C + j)/(R*C-1) )
      x = mwl.show.ConstructFigure d,
        width: W/R
        height: W/R
        x: -W/2*(C/R) + j*W/(R-1)
        y: -W/2 + i*W/(R-1)
        #rot: 45
        color: mwl.game.construct.difficultyColor(d,0,1)
        #mousedown: (e,x,y,z) -> alert "#{x}, #{y}, #{z}"###

fTestConstructPrompt = (mwl) ->
  figure = mwl.show.ConstructFigure 0.2,
    color: 'red'
    width: 200
    height: 200
    t: 0

  prompt = mwl.show.ConstructPrompt figure

fTestAssemblage = (mwl) ->
  a = mwl.show.Assemblage
    color: mwl.color.pick()
  x = a.addPart "square"
  y = a.addPart "triangle", x, 1, 2
  a.rotate 2

fTestAssemblageSet = (mwl) ->
  a = mwl.game.assemblage.create
    steps: 10
  a.attr 'x', -200
  a.show true

  b = mwl.show.Assemblage()
  b.addSet a.getSet()
  b.rotate a._rotation/90
  b.attr 'x', 200

  alert window.equals(a.getSet(),b.getSet())

fTestAssemblageDistractorReplace = (mwl) ->
  a = mwl.game.assemblage.create
    steps: randomInt(1,10)
  a.show true

  b = a.createDistractorReplace()

  c = mwl.show.Choice [a,b]

fTestAssemblageDistractorFlip = (mwl) ->
  a = mwl.game.assemblage.create
    steps: randomInt(1,10)
  a.show true

  b = a.createDistractorFlip()

  c = mwl.show.Choice [a,b]

fTestAssemblageDistractorRotate = (mwl) ->
  a = mwl.game.assemblage.create
    steps: randomInt(1,10)
  a.show true

  b = a.createDistractorRotate()

  c = mwl.show.Choice [a,b]

fTestAssemblageDistractorSwitch = (mwl) ->
  a = mwl.game.assemblage.create
    steps: randomInt(1,10)
  a.show true

  b = a.createDistractorSwitch()

  c = mwl.show.Choice [a,b]

fTestAssemblageDistractor = (mwl) ->
  a = mwl.game.assemblage.create
    steps: 10
  a.show true

  b = mwl.game.assemblage.createDistractors(a)

  b.push a
  c = mwl.show.Choice b
  c.show true

fTestAssemblagePartLocations = (mwl) ->
  a = mwl.game.assemblage.create
    steps: 10
  a.show true

  loc = a.getPartLocations()

  b = mwl.show.Assemblage()
  b.setSteps a.getSteps()

  locB = b.getPartLocations()

  alert equals(loc,locB)

  loc[idx] = loc[idx].join(' ') for idx in [0..loc.length-1]
  loc = loc.join("\n")

  alert loc

fTestShowRotate = (mwl) ->
  nRotate = mwl.game.rotate.path.length

  nC=9
  nR=8
  s = 60
  offset = 30
  for c in [0..nC-1]
    for r in [0..nR-1]
      idx = c + nC*r

      if idx < nRotate
        x = (-(nC-1)*(s+offset)-offset)/2 + c*(s+offset)
        y = (-(nR-1)*(s+offset)-offset)/2 + r*(s+offset)

        mwl.show.RotateStimulus idx,
          color: mwl.color.pick()
          width: s
          height: s
          x: x
          y: y
          orientation: 45
          mousedown: ((row,column) -> (obj,x,y) -> alert "#{row},#{column}")(r,c)

fTestScaling = (mwl) ->
  x = mwl.show.Square
  a = mwl.game.assemblage.create 10, 4
  a.show(true)
  a.scale(0.1)
  x.attr "height", a.attr("height")

fTestRemove = (mwl) ->
  x = mwl.show.Circle()
  alert '1'
  x.remove()
  alert '2'
  x = mwl.show.Circle {x:-100}
  y = mwl.show.Square {x:100}
  z = mwl.show.CompoundStimulus [x,y]
  alert '3'
  z.remove()
  alert '4;'

fTestInput = (mwl) ->
  mwl.input.addHandler "mouse", {
    event: 'down'
    button: 'left'
    expires: 0
    f: (evt) -> document.title = mwl.time.Now() #evt.which
  }

fTestExecuteSequence = (mwl) ->
  f = [
    -> document.title = 1
    -> document.title = 2
    -> document.title = 3
    -> document.title = 'press the "a" key!'
    -> document.title = 'click the button!'
    -> document.title = 'bye'
  ]
  n = [
    (tStart, tStep) -> mwl.time.Now() > tStep + 2000
    1000
    1000
    ['key', {button: 'a'}]
    ['mouse', {button: 'left'}]
    1000
  ]
  cleanup = [
    -> alert 'clean up step 1!'
    null
    null
    null
    null
  ]
  exec = mwl.exec.Sequence 'test_sequence', f, n, {
    cleanup: cleanup
    callback: -> document.title = 'done!'
  }
  mwl.queue.add "blah", -> alert 'hi'

fTestChoice = (mwl) ->
  x = mwl.show.Circle
    x: -150
  y = mwl.show.Square
    color: 'red'
    x: 0
  z = mwl.show.Circle
    x: 150
  c = mwl.show.Choice [x, y, z],
    callback: (ch, idx) -> document.title = "choice: #{idx}"
    choice_include: [0,2]
    autoposition: false
    autosize: false
    timeout: 3000

fTestShowTest = (mwl) ->
  x = mwl.show.Circle
    color: 'red'
  y = mwl.show.Circle
    color: 'red'
  z = mwl.show.Circle()
  c = mwl.show.Test [x, y, z],
    callback: (tst, idx) -> alert("#{idx} is #{if tst.correct then 'correct' else 'wrong'}!")
    correct: [0,1]
    instruct: 'Choose a red one'


fTestShowSequence = (mwl) ->
  stim = [
    [
      ['Text', 'Click the red circle!']
      ['Circle', {color: 'red', y: -100}]
    ]
    (s, idx) -> ['Text', "This is step #{idx}"]
    [
      ['Text', 'green circle!']
      ['Circle', {color: 'green', y: -100}]
    ]
    [
      ['Text', 'multiple circles!']
      ['Circle', {color: 'blue', x:-100, y:-100}]
      ['Circle', {color: 'red', x:100, y:-100}]
    ]
    [
      ['Circle', {color: 'blue', r: 100, y: -100}]
      ['Text', 'is this text properly centering itself, and what is the nature of the universe?']
    ]
    [
      ['Circle', {color: 'red'}]
      ['Circle', {color: 'green'}]
      ['Circle', {color: 'blue'}]
    ]
    [
      ['Text', 'finished']
    ]
  ]
  next = [
    ['mouse', {button: 'left'}]
    1000
    1000
    ['choice', {callback: (el, idx) -> document.title = el}]
    1000
    ['test', {callback: (el, idx) -> document.title = el}]
    1000
  ]

  shw = mwl.exec.Show 'test_show_sequence', stim, next, {
    callback: -> document.title = 'done!'
  }

fTestDataBackend = (mwl) ->
  $.get('/data', {action:'write', key:'blah', value:1}, (data) ->
    alert obj2str(data)
  )
  $.get('/data', {action:'archive', key:'blah', value:'hmm'}, (data) ->
    alert obj2str(data)
  )
  $.get('/data', {action:'read', key:'blah'}, (data) ->
    alert obj2str(data)
  )

fTestConstructTrial = (mwl) ->
  d = (df for df in [0..1] by 0.025)
  idx = -1

  fStep = (shw) -> idx++; if idx<d.length then fTrial()
  fTrial = ->
    mwl.game.construct.trial {d:d[idx]},
      callback: fStep

  fStep(null)

fTestAssemblageTrial = (mwl) ->
  steps = [1..100]
  idx = -1

  fStep = (shw) -> idx++; if idx<steps.length then fTrial()
  fTrial = ->
    mwl.game.assemblage.trial {steps:steps[idx]},
      callback: fStep

  fStep(null)

fTestRotateTrial = (mwl) ->
  precision = [90,80,70,60,50,40,30,20,10,9,8,7,6,5,4,3,2,1]
  (precision[idx] = 90-precision[idx]) for idx in [0..precision.length-1]

  idx = -1

  fStep = (shw) -> idx++; if idx<precision.length then fTrial()
  fTrial = ->
    mwl.game.rotate.trial {precision:precision[idx]},
      callback: fStep

  fStep(null)

fTestSession = (mwl) ->
  mwl.session.run()

window.MWLearnTests = class MWLearnTests
  _tests: null
  _mwl: null

  constructor: (mwl) ->
    @_tests = {}
    @_mwl = mwl

    @add "testnaturaldirection", fTestNaturalDirection
    @add "teststimulus", fTestStimulus
    @add "testcompoundstimulus", fTestCompoundStimulus
    @add 'teststimulusgrid', fTestStimulusGrid
    @add "testshowpath", fTestShowPath
    @add "testshowitemlist", fTestShowItemList
    @add "testconstruct", fTestConstruct
    @add "testconstructprompt", fTestConstructPrompt
    @add "testassemblage", fTestAssemblage
    @add "testassemblageset", fTestAssemblageSet
    @add "testassemblagedistractorreplace", fTestAssemblageDistractorReplace
    @add "testassemblagedistractorflip", fTestAssemblageDistractorFlip
    @add "testassemblagedistractorrotate", fTestAssemblageDistractorRotate
    @add "testassemblagedistractorswitch", fTestAssemblageDistractorSwitch
    @add "testassemblagedistractor", fTestAssemblageDistractor
    @add "testassemblagepartlocations", fTestAssemblagePartLocations
    @add "testshowrotate", fTestShowRotate
    @add "testscaling", fTestScaling
    @add "testremove", fTestRemove
    @add "testinput", fTestInput
    @add "testexec", fTestExecuteSequence
    @add "testchoice", fTestChoice
    @add "testshowtest", fTestShowTest
    @add "testshowsequence", fTestShowSequence
    @add "testdatabackend", fTestDataBackend
    @add "testconstructtrial", fTestConstructTrial
    @add "testassemblagetrial", fTestAssemblageTrial
    @add "testrotatetrial", fTestRotateTrial
    @add "testsession", fTestSession

  add: (name, fTest) -> @_tests[name] = fTest

  run: (name, options={}) ->
    options.try = options.try ? true

    fTry = =>
      @_tests[name](@_mwl)
      alert "#{name} succeeded!"
    fFail = (error) =>
      alert "#{name} failed (#{error})!"

    fTest = if options.try
      => try
        fTry()
      catch error
        fFail(error)
    else
      => fTry()

    @_mwl.queue.add name, fTest

  runAll: -> @run(name) for name of @_tests
